plot.title = element_text(size=22)) #change legend text font size
numIter <- 2
timeVec <- c(0)
time <- 0
maxTimeVec <- c(0)
maxTime <- 0
for(j in c(2,seq(500,10000, 500))){
print("j:")
print(j)
print("i:")
for(i in 1:numIter){
print(i)
a <- genpoints(j)
start_timeNet <- Sys.time()
BalancedExtensionSolver(a[[1]], a[[2]], p = 1)
end_timeNet <- Sys.time()
time <- time + as.double(difftime(end_timeNet, start_timeNet, units = "secs"))
maxTime <- max(maxTime, as.double(difftime(end_timeNet, start_timeNet, units = "secs")))
}
timeVec <- c(timeVec, time)
maxTimeVec <- c(maxTimeVec, maxTime)
time <- 0
maxTime <- 0
}
timeAv <- timeVec[timeVec != 0]/numIter
timeMax <- maxTimeVec[maxTimeVec != 0]
x <- c(2,seq(500,10000, 500))
Av <- rep("Average", length(x))
Max <- rep("Maximum", length(x))
dAv <- data.frame(timeAv, x, Av)
dMax <- data.frame(timeMax, x, Max)
colnames(dAv) <- c("data", "x", "Time")
colnames(dMax) <- c("data", "x", "Time")
data <- rbind(dAv, dMax)
data
ggplot(data = data, aes(x = x, y = data, color = Time))+
geom_line()+
ggtitle("Memory Usage UMTP Solver") +
xlab("Total number of points") +
ylab("Memory space used (GB)")+
theme(legend.key.size = unit(2.5, 'cm'), #change legend key size
legend.key.height = unit(1, 'cm'), #change legend key height
legend.key.width = unit(2.5, 'cm'), #change legend key width
legend.title = element_text(size=16), #change legend title font size
legend.text = element_text(size=14),
legend.position = c(0.11, 0.86),
axis.text=element_text(size=18),
axis.title=element_text(size=14,face="bold"),
plot.title = element_text(size=22)) #change legend text font size
numIter <- 10
timeVec <- c(0)
time <- 0
maxTimeVec <- c(0)
maxTime <- 0
for(j in c(2,seq(500,10000, 500))){
print("j:")
print(j)
print("i:")
for(i in 1:numIter){
print(i)
a <- genpoints(j)
start_timeNet <- Sys.time()
BalancedExtensionSolver(a[[1]], a[[2]], p = 1)
end_timeNet <- Sys.time()
time <- time + as.double(difftime(end_timeNet, start_timeNet, units = "secs"))
maxTime <- max(maxTime, as.double(difftime(end_timeNet, start_timeNet, units = "secs")))
}
timeVec <- c(timeVec, time)
maxTimeVec <- c(maxTimeVec, maxTime)
time <- 0
maxTime <- 0
}
timeAv <- timeVec[timeVec != 0]/numIter
timeMax <- maxTimeVec[maxTimeVec != 0]
x <- c(2,seq(500,10000, 500))
Av <- rep("Average", length(x))
Max <- rep("Maximum", length(x))
dAv <- data.frame(timeAv, x, Av)
dMax <- data.frame(timeMax, x, Max)
colnames(dAv) <- c("data", "x", "Time")
colnames(dMax) <- c("data", "x", "Time")
data <- rbind(dAv, dMax)
data
ggplot(data = data, aes(x = x, y = data, color = Time))+
geom_line()+
ggtitle("Memory Usage UMTP Solver") +
xlab("Total number of points") +
ylab("Memory space used (GB)")+
theme(legend.key.size = unit(2.5, 'cm'), #change legend key size
legend.key.height = unit(1, 'cm'), #change legend key height
legend.key.width = unit(2.5, 'cm'), #change legend key width
legend.title = element_text(size=16), #change legend title font size
legend.text = element_text(size=14),
legend.position = c(0.11, 0.86),
axis.text=element_text(size=18),
axis.title=element_text(size=14,face="bold"),
plot.title = element_text(size=22)) #change legend text font size
memory <- 0
memoryVecMax <- c(0)
memoryVecAv <- c(0)
memoryMax <- 0
memoryAv <- 0
numIter <- 10
for(j in c(2,seq(500,3500, 500))){
print(j)
for(i in 1:numIter){
a <- genpoints(j)
p <- profmem(BalancedExtensionSolver(a[[1]], a[[2]], p = 1))
memory <- sum(p$bytes)
if(!is.na(memory)){
memoryAv <- memoryAv + memory
memoryMax <- max(memoryMax, memory)
}
}
memoryVecAv<- c(memoryVecAv, memoryAv/numIter)
memoryVecMax <- c(memoryVecMax, memoryMax)
memoryAv <- 0
memoryMax <- 0
}
memAv <- memoryVecAv[memoryVecAv!= 0]
memMax <- memoryVecMax[memoryVecMax  != 0]
x <- c(2,seq(500,10000, 500))
Av <- rep("Average", length(x))
Max <- rep("Maximum", length(x))
dAv <- data.frame(memAv, x, Av)
dMax <- data.frame(memMax, x, Max)
colnames(dAv) <- c("data", "x", "Usage")
x <- c(2,seq(500,3500, 500))
Av <- rep("Average", length(x))
Max <- rep("Maximum", length(x))
dAv <- data.frame(memAv, x, Av)
dMax <- data.frame(memMax, x, Max)
colnames(dAv) <- c("data", "x", "Usage")
colnames(dMax) <- c("data", "x", "Usage")
data <- rbind(dAv, dMax)
ggplot(data = data, aes(x = x, y = data))+
geom_line()+
ggtitle("Memory Usage UMTP Solver") +
xlab("Total number of points") +
ylab("Memory space used (GB)")+
theme(legend.key.size = unit(2.5, 'cm'), #change legend key size
legend.key.height = unit(1, 'cm'), #change legend key height
legend.key.width = unit(2.5, 'cm'), #change legend key width
legend.title = element_text(size=16), #change legend title font size
legend.text = element_text(size=14),
legend.position = c(0.11, 0.86),
axis.text=element_text(size=18),
axis.title=element_text(size=14,face="bold"),
plot.title = element_text(size=22)) #change legend text font size
ggplot(data = data, aes(x = x, y = data, colour = Usage))+
geom_line()+
ggtitle("Memory Usage UMTP Solver") +
xlab("Total number of points") +
ylab("Memory space used (GB)")+
theme(legend.key.size = unit(2.5, 'cm'), #change legend key size
legend.key.height = unit(1, 'cm'), #change legend key height
legend.key.width = unit(2.5, 'cm'), #change legend key width
legend.title = element_text(size=16), #change legend title font size
legend.text = element_text(size=14),
legend.position = c(0.11, 0.86),
axis.text=element_text(size=18),
axis.title=element_text(size=14,face="bold"),
plot.title = element_text(size=22)) #change legend text font size
timeVec <- c(0)
time <- 0
memory <- 0
memoryVecMax <- c(0)
memoryVecAv <- c(0)
memoryMax <- 0
memoryAv <- 0
numIter <- 20
numIter <- 100
for(j in c(10000)){
print(j)
for(i in 1:numIter){
a <- genpoints(j)
p <- profmem(BalancedExtensionSolver(a[[1]], a[[2]], p = 1))
memory <- sum(p$bytes)
if(!is.na(memory)){
memoryAv <- memoryAv + memory
memoryMax <- max(memoryMax, memory)
}
}
memoryVecAv<- c(memoryVecAv, memoryAv/numIter)
memoryVecMax <- c(memoryVecMax, memoryMax)
memoryAv <- 0
memoryMax <- 0
}
memAv <- memoryVecAv[memoryVecAv!= 0]
memMax <- memoryVecMax[memoryVecMax  != 0]
x <- c(2,seq(500,3500, 500))
memAv
memMax
memAv < memMax
memMax/(1000*1000*1000)
numIter <- 1000
timeVec <- c(0)
time <- 0
maxTimeVec <- c(0)
maxTime <- 0
for(j in c(2,seq(500,10000, 500))){
print("j:")
print(j)
print("i:")
for(i in 1:numIter){
print(i)
a <- genpoints(j)
start_timeNet <- Sys.time()
BalancedExtensionSolver(a[[1]], a[[2]], p = 1)
end_timeNet <- Sys.time()
time <- time + as.double(difftime(end_timeNet, start_timeNet, units = "secs"))
maxTime <- max(maxTime, as.double(difftime(end_timeNet, start_timeNet, units = "secs")))
}
timeVec <- c(timeVec, time)
maxTimeVec <- c(maxTimeVec, maxTime)
time <- 0
maxTime <- 0
}
numIter <- 300
timeVec <- c(0)
time <- 0
maxTimeVec <- c(0)
maxTime <- 0
for(j in c(2,seq(500,10000, 500))){
print("j:")
print(j)
print("i:")
for(i in 1:numIter){
print(i)
a <- genpoints(j)
start_timeNet <- Sys.time()
BalancedExtensionSolver(a[[1]], a[[2]], p = 1)
end_timeNet <- Sys.time()
time <- time + as.double(difftime(end_timeNet, start_timeNet, units = "secs"))
maxTime <- max(maxTime, as.double(difftime(end_timeNet, start_timeNet, units = "secs")))
}
timeVec <- c(timeVec, time)
maxTimeVec <- c(maxTimeVec, maxTime)
time <- 0
maxTime <- 0
}
timeAv <- timeVec[timeVec != 0]/numIter
timeMax <- maxTimeVec[maxTimeVec != 0]
x <- c(2,seq(500,10000, 500))
Av <- rep("Average", length(x))
Max <- rep("Maximum", length(x))
dAv <- data.frame(timeAv, x, Av)
dMax <- data.frame(timeMax, x, Max)
colnames(dAv) <- c("data", "x", "Time")
colnames(dMax) <- c("data", "x", "Time")
data <- rbind(dAv, dMax)
data
ggplot(data = data, aes(x = x, y = data, color = Time))+
geom_line()+
ggtitle("Memory Usage UMTP Solver") +
xlab("Total number of points") +
ylab("Memory space used (GB)")+
theme(legend.key.size = unit(2.5, 'cm'), #change legend key size
legend.key.height = unit(1, 'cm'), #change legend key height
legend.key.width = unit(2.5, 'cm'), #change legend key width
legend.title = element_text(size=16), #change legend title font size
legend.text = element_text(size=14),
legend.position = c(0.11, 0.86),
axis.text=element_text(size=18),
axis.title=element_text(size=14,face="bold"),
plot.title = element_text(size=22)) #change legend text font size
write.csv(data, "./dataframeUsageBalanced5050.csv", row.names = FALSE)
ggplot(data = data, aes(x = x, y = data, colour = Usage))+
geom_line()+
ggtitle("Memory Usage UMTP Solver") +
xlab("Total number of points") +
ylab("Memory space used (GB)")+
theme(legend.key.size = unit(2.5, 'cm'), #change legend key size
legend.key.height = unit(1, 'cm'), #change legend key height
legend.key.width = unit(2.5, 'cm'), #change legend key width
legend.title = element_text(size=16), #change legend title font size
legend.text = element_text(size=14),
legend.position = c(0.11, 0.86),
axis.text=element_text(size=18),
axis.title=element_text(size=14,face="bold"),
plot.title = element_text(size=22)) #change legend text font size
memMax/(1000*1000*1000)
memAv <- memoryVecAv[memoryVecAv!= 0]
memMax <- memoryVecMax[memoryVecMax  != 0]
x <- c(2,seq(500,3500, 500))
Av <- rep("Average", length(x))
Max <- rep("Maximum", length(x))
dAv <- data.frame(memAv, x, Av)
dMax <- data.frame(memMax, x, Max)
colnames(dAv) <- c("data", "x", "Usage")
colnames(dMax) <- c("data", "x", "Usage")
data <- rbind(dAv, dMax)
ggplot(data = data, aes(x = x, y = data, colour = Usage))+
geom_line()+
ggtitle("Memory Usage UMTP Solver") +
xlab("Total number of points") +
ylab("Memory space used (GB)")+
theme(legend.key.size = unit(2.5, 'cm'), #change legend key size
legend.key.height = unit(1, 'cm'), #change legend key height
legend.key.width = unit(2.5, 'cm'), #change legend key width
legend.title = element_text(size=16), #change legend title font size
legend.text = element_text(size=14),
legend.position = c(0.11, 0.86),
axis.text=element_text(size=18),
axis.title=element_text(size=14,face="bold"),
plot.title = element_text(size=22)) #change legend text font size
memAv <- memoryVecAv[memoryVecAv!= 0]
memMax <- memoryVecMax[memoryVecMax  != 0]/(1000*1000*1000)
x <- c(2,seq(500,3500, 500))
Av <- rep("Average", length(x))
Max <- rep("Maximum", length(x))
dAv <- data.frame(memAv, x, Av)
dMax <- data.frame(memMax, x, Max)
colnames(dAv) <- c("data", "x", "Usage")
colnames(dMax) <- c("data", "x", "Usage")
data <- rbind(dAv, dMax)
ggplot(data = data, aes(x = x, y = data, colour = Usage))+
geom_line()+
ggtitle("Memory Usage UMTP Solver") +
xlab("Total number of points") +
ylab("Memory space used (GB)")+
theme(legend.key.size = unit(2.5, 'cm'), #change legend key size
legend.key.height = unit(1, 'cm'), #change legend key height
legend.key.width = unit(2.5, 'cm'), #change legend key width
legend.title = element_text(size=16), #change legend title font size
legend.text = element_text(size=14),
legend.position = c(0.11, 0.86),
axis.text=element_text(size=18),
axis.title=element_text(size=14,face="bold"),
plot.title = element_text(size=22)) #change legend text font size
memAv <- memoryVecAv[memoryVecAv!= 0]/(1000*1000*1000)
memMax <- memoryVecMax[memoryVecMax  != 0]/(1000*1000*1000)
x <- c(2,seq(500,3500, 500))
Av <- rep("Average", length(x))
Max <- rep("Maximum", length(x))
dAv <- data.frame(memAv, x, Av)
dMax <- data.frame(memMax, x, Max)
colnames(dAv) <- c("data", "x", "Usage")
colnames(dMax) <- c("data", "x", "Usage")
data <- rbind(dAv, dMax)
ggplot(data = data, aes(x = x, y = data, colour = Usage))+
geom_line()+
ggtitle("Memory Usage UMTP Solver") +
xlab("Total number of points") +
ylab("Memory space used (GB)")+
theme(legend.key.size = unit(2.5, 'cm'), #change legend key size
legend.key.height = unit(1, 'cm'), #change legend key height
legend.key.width = unit(2.5, 'cm'), #change legend key width
legend.title = element_text(size=16), #change legend title font size
legend.text = element_text(size=14),
legend.position = c(0.11, 0.86),
axis.text=element_text(size=18),
axis.title=element_text(size=14,face="bold"),
plot.title = element_text(size=22)) #change legend text font size
tree <- list(1, c(1,2,1), c(2,3,1), c(3,4,1), c(3,5,1), c(2,6,1),
c(1,7,1), c(7,8,1), c(7,9,1), c(9,10,1), c(9,11,1),
c(11,12,1), c(11,13,1))
#'
#'
constructionCost <- rep(2,13)
destructionCost <- rep(1,13)
#'
#'
supply <- c(0,0,1,2,0,0,0,0,0,0,0,0,0)
demand <- c(0,0,0,0,0,1,0,1,0,0,0,1,1)
supplyList = list(supply, destructionCost)
demandList = list(demand, constructionCost)
transport <- treeTransport(tree, supplyList, demandList,
output = "list")
library(unbalancedTransport)
transport <- treeTransport(tree, supplyList, demandList,
output = "list")
plotTree(tree, tList = transport$transportList,
supply = supply, demand = demand)
#'
#'
constructionCost <- rep(12,13)
destructionCost <- rep(1,13)
#'
#'
supply <- c(0,0,1,2,0,0,0,0,0,0,0,0,0)
demand <- c(0,0,0,0,0,1,0,1,0,0,0,1,1)
supplyList = list(supply, destructionCost)
demandList = list(demand, constructionCost)
transport <- treeTransport(tree, supplyList, demandList,
output = "list")
plotTree(tree, tList = transport$transportList,
supply = supply, demand = demand)
tree <- list(1, c(1,2,1), c(2,3,1), c(2,4,1), c(1,5,1), c(5,6,1),
#'                 c(5,7,1), c(1,8,10), c(8,9,1), c(8,10,1))
#'
constructionCost <- rep(2,13)
destructionCost <- rep(2,13)
#'
supply <- c(0,0,2,0,0,4,0,0,2,0)
demand <- c(0,0,0,0,7,0,0,0,0,1)
#'
supplyList = list(supply, destructionCost)
demandList = list(demand, constructionCost)
#'
transport <- treeTransport(tree, supplyList, demandList,
#'                            output = "list")
#'
plotTree(tree, tList = transport$transportList,
supply = supply, demand = demand)
tree <- list(1, c(1,2,1), c(2,3,1), c(2,4,1), c(1,5,1), c(5,6,1),
c(5,7,1), c(1,8,10), c(8,9,1), c(8,10,1))
#'
constructionCost <- rep(2,13)
destructionCost <- rep(2,13)
#'
supply <- c(0,0,2,0,0,4,0,0,2,0)
demand <- c(0,0,0,0,7,0,0,0,0,1)
#'
supplyList = list(supply, destructionCost)
demandList = list(demand, constructionCost)
tree <- list(1, c(1,2,1), c(2,3,1), c(2,4,1), c(1,5,1), c(5,6,1),
c(5,7,1), c(1,8,10), c(8,9,1), c(8,10,1))
#'
constructionCost <- rep(2,13)
destructionCost <- rep(2,13)
#'
supply <- c(0,0,2,0,0,4,0,0,2,0)
demand <- c(0,0,0,0,7,0,0,0,0,1)
#'
supplyList = list(supply, destructionCost)
demandList = list(demand, constructionCost)
#'
transport <- treeTransport(tree, supplyList, demandList,
#'                            output = "list")
#'
plotTree(tree, tList = transport$transportList,
supply = supply, demand = demand)
))
tree <- list(1, c(1,2,1), c(2,3,1), c(2,4,1), c(1,5,1), c(5,6,1),
c(5,7,1), c(1,8,10), c(8,9,1), c(8,10,1))
#'
constructionCost <- rep(2,13)
destructionCost <- rep(2,13)
#'
supply <- c(0,0,2,0,0,4,0,0,2,0)
demand <- c(0,0,0,0,7,0,0,0,0,1)
#'
supplyList = list(supply, destructionCost)
demandList = list(demand, constructionCost)
#'
transport <- treeTransport(tree, supplyList, demandList,
#'                            output = "list")
#'
plotTree(tree, tList = transport$transportList,
supply = supply, demand = demand)
)
tree <- list(1, c(1,2,1), c(2,3,1), c(2,4,1), c(1,5,1), c(5,6,1),
c(5,7,1), c(1,8,10), c(8,9,1), c(8,10,1))
#'
constructionCost <- rep(2,13)
destructionCost <- rep(2,13)
#'
supply <- c(0,0,2,0,0,4,0,0,2,0)
demand <- c(0,0,0,0,7,0,0,0,0,1)
#'
supplyList = list(supply, destructionCost)
demandList = list(demand, constructionCost)
#'
transport <- treeTransport(tree, supplyList, demandList,
output = "list")
#'
plotTree(tree, tList = transport$transportList, supply = supply, demand = demand)
#'
supply <- c(0,0,2,0,0,3,0,0,2,0)
demand <- c(0,0,0,0,7,0,0,0,0,1)
#'
supplyList = list(supply, destructionCost)
demandList = list(demand, constructionCost)
#'
transport <- treeTransport(tree, supplyList, demandList,
output = "list")
#'
plotTree(tree, tList = transport$transportList, supply = supply, demand = demand)
tree <- list(1, c(1,2,1), c(2,3,1), c(2,4,1), c(1,5,1), c(5,6,1),
c(5,7,1), c(1,8,10), c(8,9,1), c(8,10,1))
#'
constructionCost <- rep(2,13)
destructionCost <- rep(2,13)
#'
supply <- c(0,0,2,0,0,3,0,0,2,0)
demand <- c(0,0,0,0,7,0,0,0,0,1)
#'
supplyList = list(supply, destructionCost)
demandList = list(demand, constructionCost)
#'
transport <- treeTransport(tree, supplyList, demandList,
output = "list")
#'
plotTree(tree, tList = transport$transportList, supply = supply, demand = demand)
#'
supply <- c(0,0,2,0,0,4,0,0,2,0)
demand <- c(0,0,0,0,5,0,0,0,0,1)
#'
supplyList = list(supply, destructionCost)
demandList = list(demand, constructionCost)
#'
transport <- treeTransport(tree, supplyList, demandList,
output = "list")
#'
plotTree(tree, tList = transport$transportList, supply = supply, demand = demand)
plotTree(tree, tList = transport$transportList, supply = supply, demand = demand)
transport
exp = 43
exp
exp(2)
library(unbalancedTransport)
