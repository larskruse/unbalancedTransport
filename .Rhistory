#'                            output = "list")
#'
#' plotTree(tree, tList = transport$transportList,
#'          supply = supply, demand = demand)
#'
#'
#' @export
treeTransport <- function(tree, supplyList, demandList, output = "transportPlan", costMatrix = NULL){
supply = supplyList[[1]]
demand = demandList[[1]]
creationCost = supplyList[[2]]
destructionCost = demandList[[2]]
if(output != "list" & output != "transportPlan"  & output != "cost"){
print("Output set to 'cost'")
output <- "cost"
}
treegkrOut <- treegkr_Rcpp(tree[-1], supply, demand, creationCost, destructionCost)
importVec = treegkrOut$import
# importVec hat positive and negative entries. The positive entries indicate
# imported mass, the negative entries exported mass.
# Splitting the vector in import and export
import <- rep(0,length(supply))
export <- rep(0,length(supply))
for(i in 1:length(importVec)){
if(importVec[i] != 0){
if(importVec[i] > 0){
import[i] <- import[i] + importVec[i]
}else{
export[i] <- export[i] - importVec[i]
}
}
}
print("hey")
if(output != "cost"){
# Compute the cost matrix from the tree.
if(is.null(costMatrix)){
costMatrix <- getCostMatrix(tree)
}
print(sum(supply-export))
print(sum(demand-import))
# Computing the transport plan using the revised simplex algorithm.
res <- transport::transport((supply-export), (demand-import), costMatrix,method = "revsimplex")
# Computing the transport plan in list form. Each entry consists of the node the mass
# comes from, the node the mass is transported to and the amount of mass.
transportList <- list()
if(length(res$from) > 0){
for(i in 1:length(res$from)){
if(res$mass[i] != 0){
transportList[[length(transportList)+1]] <- c(res[[1]][i], res[[2]][i], res[[3]][i])
}
}
}
if(output == "list"){
result <- list(treegkrOut$cost, transportList, import, export)
names(result) <- c("cost", "transportList", "export", "import")
return(result)
}else if (output == "transportPlan"){
if(length(res$from) > 0){
tPlan <- matrix(0,length(supply),length(demand))
tPlan[cbind(res$from,res$to)] <- res$mass
}else{
tPlan <- matrix(0,length(supply),length(demand))
}
result <- list(treegkrOut$cost, tPlan, import, export)
names(result) <- c("cost", "transportPlan", "export", "import")
}
# return a list according to the "output" variable
}else{
result <- list(treegkrOut$cost, import, export)
names(result) <- c("cost", "export", "import")
return(result)
}
}
for (k in 1:1) {
kk <- 0
for (i in 1:1) {
if (i == 10) {
name1 <-
paste(
"/home/lars/Documents/Master/Masterarbeit/dataDotmark/Data/",
images[k],
"/data",
as.character(size[1]) ,
"_10",
as.character(i),
".csv",
sep = ""
)
} else{
name1 <-
paste(
"/home/lars/Documents/Master/Masterarbeit/dataDotmark/Data/",
images[k],
"/data",
as.character(size[1]) ,
"_100",
as.character(i),
".csv",
sep = ""
)
}
amat1 <- as.matrix(read.csv(name1, header = FALSE))
for (j in 1:2) {
if (j > i) {
if (j == 10) {
name2 <-
paste(
"/home/lars/Documents/Master/Masterarbeit/dataDotmark/Data/",
images[k],
"/data",
as.character(size[1]) ,
"_10",
as.character(j),
".csv",
sep = ""
)
} else{
name2 <-
paste(
"/home/lars/Documents/Master/Masterarbeit/dataDotmark/Data/",
images[k],
"/data",
as.character(size[1]) ,
"_100",
as.character(j),
".csv",
sep = ""
)
}
kk <- kk + 1
amat2 <- as.matrix(read.csv(name2, header = FALSE))
amat1 <- amat1 + matrix(rnorm(1024, mean= mm, sd = sdsd), nrow = 32)
amat2 <- amat2 + matrix(rnorm(1024, mean= mm, sd = sdsd), nrow = 32)
vec1 <- c(amat1)
vec2 <- c(amat2)
for( tt in 1:nrow(tree)){
if(tree$xcoordchild[tt]%%1  == 0){
tree$supply[tt] <- amat1[tree$xcoordchild[tt]+1, tree$ycoordchild[tt]+1]
tree$demand[tt] <- amat2[tree$xcoordchild[tt]+1, tree$ycoordchild[tt]+1]
}
}
supplyList <- list(vec1, costDestruct, matts[[1]])
demandList <- list(vec2, costCreate, matts[[1]])
supplyListT <- list(tree$supply, costDestructT)
demandListT <- list(tree$demand, costCreateT)
print(1)
start_time <- Sys.time()
res <- umtp(supplyList, demandList, exp = 2, costMatrix = cmat32)
end_time <- Sys.time()
df_umtp32[k, kk] <- as.double(end_time - start_time, units = "secs")
print(2)
start_time <- Sys.time()
res <-treeTransport(ttree, supplyListT, demandListT, output = "cost")
end_time <- Sys.time()
df_Tree32[k, kk] <- as.double(end_time - start_time, units = "secs")
print(3)
start_time <- Sys.time()
res <-treeTransport(ttree, supplyListT, demandListT, output = "list", costMatrix = treeMat)
end_time <- Sys.time()
df_TreeT32[k, kk] <- as.double(end_time - start_time, units = "secs")
print(4)
}
}
}
}
library(unbalancedTransport)
kk <- 0
l <- 1
for (k in 1:1) {
kk <- 0
for (i in 1:1) {
if (i == 10) {
name1 <-
paste(
"/home/lars/Documents/Master/Masterarbeit/dataDotmark/Data/",
images[k],
"/data",
as.character(size[1]) ,
"_10",
as.character(i),
".csv",
sep = ""
)
} else{
name1 <-
paste(
"/home/lars/Documents/Master/Masterarbeit/dataDotmark/Data/",
images[k],
"/data",
as.character(size[1]) ,
"_100",
as.character(i),
".csv",
sep = ""
)
}
amat1 <- as.matrix(read.csv(name1, header = FALSE))
for (j in 1:2) {
if (j > i) {
if (j == 10) {
name2 <-
paste(
"/home/lars/Documents/Master/Masterarbeit/dataDotmark/Data/",
images[k],
"/data",
as.character(size[1]) ,
"_10",
as.character(j),
".csv",
sep = ""
)
} else{
name2 <-
paste(
"/home/lars/Documents/Master/Masterarbeit/dataDotmark/Data/",
images[k],
"/data",
as.character(size[1]) ,
"_100",
as.character(j),
".csv",
sep = ""
)
}
kk <- kk + 1
amat2 <- as.matrix(read.csv(name2, header = FALSE))
amat1 <- amat1 + matrix(rnorm(1024, mean= mm, sd = sdsd), nrow = 32)
amat2 <- amat2 + matrix(rnorm(1024, mean= mm, sd = sdsd), nrow = 32)
vec1 <- c(amat1)
vec2 <- c(amat2)
for( tt in 1:nrow(tree)){
if(tree$xcoordchild[tt]%%1  == 0){
tree$supply[tt] <- amat1[tree$xcoordchild[tt]+1, tree$ycoordchild[tt]+1]
tree$demand[tt] <- amat2[tree$xcoordchild[tt]+1, tree$ycoordchild[tt]+1]
}
}
supplyList <- list(vec1, costDestruct, matts[[1]])
demandList <- list(vec2, costCreate, matts[[1]])
supplyListT <- list(tree$supply, costDestructT)
demandListT <- list(tree$demand, costCreateT)
print(head(supplyListT[[1]]))
print(head(demandListT[[1]]))
print(1)
start_time <- Sys.time()
res <- umtp(supplyList, demandList, exp = 2, costMatrix = cmat32)
end_time <- Sys.time()
df_umtp32[k, kk] <- as.double(end_time - start_time, units = "secs")
print(2)
start_time <- Sys.time()
res <-treeTransport(ttree, supplyListT, demandListT, output = "cost")
end_time <- Sys.time()
df_Tree32[k, kk] <- as.double(end_time - start_time, units = "secs")
print(3)
start_time <- Sys.time()
res <-treeTransport(ttree, supplyListT, demandListT, output = "list", costMatrix = treeMat)
end_time <- Sys.time()
df_TreeT32[k, kk] <- as.double(end_time - start_time, units = "secs")
print(4)
}
}
}
}
kk <- 0
l <- 1
for (k in 1:1) {
kk <- 0
for (i in 1:1) {
if (i == 10) {
name1 <-
paste(
"/home/lars/Documents/Master/Masterarbeit/dataDotmark/Data/",
images[k],
"/data",
as.character(size[1]) ,
"_10",
as.character(i),
".csv",
sep = ""
)
} else{
name1 <-
paste(
"/home/lars/Documents/Master/Masterarbeit/dataDotmark/Data/",
images[k],
"/data",
as.character(size[1]) ,
"_100",
as.character(i),
".csv",
sep = ""
)
}
amat1 <- as.matrix(read.csv(name1, header = FALSE))
for (j in 1:2) {
if (j > i) {
if (j == 10) {
name2 <-
paste(
"/home/lars/Documents/Master/Masterarbeit/dataDotmark/Data/",
images[k],
"/data",
as.character(size[1]) ,
"_10",
as.character(j),
".csv",
sep = ""
)
} else{
name2 <-
paste(
"/home/lars/Documents/Master/Masterarbeit/dataDotmark/Data/",
images[k],
"/data",
as.character(size[1]) ,
"_100",
as.character(j),
".csv",
sep = ""
)
}
kk <- kk + 1
amat2 <- as.matrix(read.csv(name2, header = FALSE))
amat1 <- amat1 + matrix(rnorm(1024, mean= mm, sd = sdsd), nrow = 32)
amat2 <- amat2 + matrix(rnorm(1024, mean= mm, sd = sdsd), nrow = 32)
vec1 <- c(amat1)
vec2 <- c(amat2)
for( tt in 1:nrow(tree)){
if(tree$xcoordchild[tt]%%1  == 0){
tree$supply[tt] <- amat1[tree$xcoordchild[tt]+1, tree$ycoordchild[tt]+1]
tree$demand[tt] <- amat2[tree$xcoordchild[tt]+1, tree$ycoordchild[tt]+1]
}
}
supplyList <- list(vec1, costDestruct, matts[[1]])
demandList <- list(vec2, costCreate, matts[[1]])
supplyListT <- list(tree$supply, costDestructT)
demandListT <- list(tree$demand, costCreateT)
print(head(supplyListT[[1]]))
print(head(demandListT[[1]]))
print("1")
start_time <- Sys.time()
res <- umtp(supplyList, demandList, exp = 2, costMatrix = cmat32)
end_time <- Sys.time()
df_umtp32[k, kk] <- as.double(end_time - start_time, units = "secs")
print("2")
start_time <- Sys.time()
res <-treeTransport(ttree, supplyListT, demandListT, output = "cost")
end_time <- Sys.time()
df_Tree32[k, kk] <- as.double(end_time - start_time, units = "secs")
print("3")
start_time <- Sys.time()
res <-treeTransport(ttree, supplyListT, demandListT, output = "list", costMatrix = treeMat)
end_time <- Sys.time()
df_TreeT32[k, kk] <- as.double(end_time - start_time, units = "secs")
print("4")
}
}
}
}
library(unbalancedTransport)
kk <- 0
l <- 1
for (k in 1:1) {
kk <- 0
for (i in 1:1) {
if (i == 10) {
name1 <-
paste(
"/home/lars/Documents/Master/Masterarbeit/dataDotmark/Data/",
images[k],
"/data",
as.character(size[1]) ,
"_10",
as.character(i),
".csv",
sep = ""
)
} else{
name1 <-
paste(
"/home/lars/Documents/Master/Masterarbeit/dataDotmark/Data/",
images[k],
"/data",
as.character(size[1]) ,
"_100",
as.character(i),
".csv",
sep = ""
)
}
amat1 <- as.matrix(read.csv(name1, header = FALSE))
for (j in 1:2) {
if (j > i) {
if (j == 10) {
name2 <-
paste(
"/home/lars/Documents/Master/Masterarbeit/dataDotmark/Data/",
images[k],
"/data",
as.character(size[1]) ,
"_10",
as.character(j),
".csv",
sep = ""
)
} else{
name2 <-
paste(
"/home/lars/Documents/Master/Masterarbeit/dataDotmark/Data/",
images[k],
"/data",
as.character(size[1]) ,
"_100",
as.character(j),
".csv",
sep = ""
)
}
kk <- kk + 1
amat2 <- as.matrix(read.csv(name2, header = FALSE))
amat1 <- amat1 + matrix(rnorm(1024, mean= mm, sd = sdsd), nrow = 32)
amat2 <- amat2 + matrix(rnorm(1024, mean= mm, sd = sdsd), nrow = 32)
vec1 <- c(amat1)
vec2 <- c(amat2)
for( tt in 1:nrow(tree)){
if(tree$xcoordchild[tt]%%1  == 0){
tree$supply[tt] <- amat1[tree$xcoordchild[tt]+1, tree$ycoordchild[tt]+1]
tree$demand[tt] <- amat2[tree$xcoordchild[tt]+1, tree$ycoordchild[tt]+1]
}
}
supplyList <- list(vec1, costDestruct, matts[[1]])
demandList <- list(vec2, costCreate, matts[[1]])
supplyListT <- list(tree$supply, costDestructT)
demandListT <- list(tree$demand, costCreateT)
print(head(supplyListT[[1]]))
print(head(demandListT[[1]]))
print("1")
start_time <- Sys.time()
res <- umtp(supplyList, demandList, exp = 2, costMatrix = cmat32)
end_time <- Sys.time()
df_umtp32[k, kk] <- as.double(end_time - start_time, units = "secs")
print("2")
start_time <- Sys.time()
res <-treeTransport(ttree, supplyListT, demandListT, output = "cost")
end_time <- Sys.time()
df_Tree32[k, kk] <- as.double(end_time - start_time, units = "secs")
print("3")
start_time <- Sys.time()
res <-treeTransport(ttree, supplyListT, demandListT, output = "list", costMatrix = treeMat)
end_time <- Sys.time()
df_TreeT32[k, kk] <- as.double(end_time - start_time, units = "secs")
print("4")
}
}
}
}
tree <- list(1, c(1,2,1), c(2,3,1), c(3,4,1), c(3,5,1), c(2,6,1),
c(1,7,1), c(7,8,1), c(7,9,1), c(9,10,1), c(9,11,1),
c(11,12,1), c(11,13,1))
constructionCost <- rep(2,13)
destructionCost <- rep(1,13)
supply <- c(0,0,1,2,0,0,0,0,0,0,0,0,0)
demand <- c(0,0,0,0,0,1,0,1,0,0,0,1,1)
supplyList = list(supply, destructionCost)
demandList = list(demand, constructionCost)
transport <- treeTransport(tree, supplyList, demandList,
output = "list")
library(unbalancedTransport)
transport <- treeTransport(tree, supplyList, demandList,
output = "list")
df_1 <- data_frame(c(NULL,NULL,NULL))
df_1 <- data.frame(c(NULL,NULL,NULL))
df_1
colnames(df_1) <- c("Team", "P1", "P2")
df_1 <- data.frame(matix(nrow = 0, ncol = 3))
df_1
colnames(df_1) <- c("Team", "P1", "P2")
df_1
tree <- data.frame(matrix(ncol = 7, nrow = 0))
colnames(tree) <- c("parent", "child", "xcoordchild", "ycoordchild", "cost", "supply", "demand")
df_1 <- data.frame(matix(ncol = 3, nrow = 0))
df_1
colnames(df_1) <- c("Team", "P1", "P2")
tree <- data.frame(matrix(ncol = 7, nrow = 0))
colnames(tree) <- c("parent", "child", "xcoordchild", "ycoordchild", "cost", "supply", "demand")
tree
tree <- data.frame(matrix(ncol = 3, nrow = 0))
colnames(tree) <- c("parent", "child", "xcoordchild")
tree
tree <- data.frame(matrix(ncol = 3, nrow = 0))
colnames(tree) <- c("Team", "P1", "P2")
tree
tree[1,] <-("A, 1, 2")
tree[1,] <-("A", 1, 2)
tree[2,] <-("A", 2,3)
tree[3,] <- ("B", 4,5)
tree[1,] <-c("A", 1, 2)
tree[2,] <-c("A", 2,3)
tree[3,] <- c("B", 4,5)
tree
merge(tree,tree)
merge(tree,tree, by =NULL)
df <- merge(tree,tree, by =NULL)
df[df$Team.x != df$Team.y]
df[Team.x != Team.y]
df[df$Team.x == "A"]
df[df$Team.x != df$Team.y]
df$Team.x
df$Team.y
df$Team.x == df$Team.y
df[df$Team.x == df$Team.y,]
df[df$Team.x != df$Team.y,]
library(unbalancedTransport)
