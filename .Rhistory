rcpp_parallel_js_distance(mat)
mat <- matrix( runif(100), nrow = 10)
mat
rcpp_parallel_js_distance(mat)
mat <- matrix( runif(100), nrow = 10)
mat
rcpp_parallel_js_distance(mat)
mat <- matrix( runif(100), nrow = 10)
mat
rcpp_parallel_js_distance(mat)
mat <- matrix( runif(100), nrow = 10)
mat
rcpp_parallel_js_distance(mat)
mat <- matrix( runif(100), nrow = 10)
mat
rcpp_parallel_js_distance(mat)
mat <- matrix( runif(100), nrow = 10)
mat
rcpp_parallel_js_distance(mat)
mat <- matrix( runif(100), nrow = 10)
mat
rcpp_parallel_js_distance(mat)
mat <- matrix( runif(100), nrow = 10)
mat
rcpp_parallel_js_distance(mat)
mat <- matrix( runif(100), nrow = 10)
mat
rcpp_parallel_js_distance(mat)
mat <- matrix( runif(100), nrow = 10)
mat
rcpp_parallel_js_distance(mat)
mat <- matrix( runif(100), nrow = 10)
mat
rcpp_parallel_js_distance(mat)
mat <- matrix( runif(100), nrow = 10)
mat
rcpp_parallel_js_distance(mat)
mat <- matrix( runif(100), nrow = 10)
mat
rcpp_parallel_js_distance(mat)
mat <- matrix( runif(100), nrow = 10)
mat
rcpp_parallel_js_distance(mat)
mat <- matrix( runif(100), nrow = 10)
mat
rcpp_parallel_js_distance(mat)
mat <- matrix( runif(100), nrow = 10)
mat
rcpp_parallel_js_distance(mat)
mat <- matrix( runif(100), nrow = 10)
mat
rcpp_parallel_js_distance(mat)
mat <- matrix( runif(100), nrow = 10)
mat
rcpp_parallel_js_distance(mat)
mat <- matrix( runif(100), nrow = 10)
mat
rcpp_parallel_js_distance(mat)
mat <- matrix( runif(100), nrow = 10)
mat
rcpp_parallel_js_distance(mat)
mat <- matrix( runif(100), nrow = 10)
mat
rcpp_parallel_js_distance(mat)
mat <- matrix( runif(100), nrow = 10)
mat
rcpp_parallel_js_distance(mat)
mat <- matrix( runif(100), nrow = 10)
mat
rcpp_parallel_js_distance(mat)
mat <- matrix( runif(100), nrow = 10)
mat
rcpp_parallel_js_distance(mat)
mat <- matrix( runif(100), nrow = 10)
mat
rcpp_parallel_js_distance(mat)
mat <- matrix( runif(100), nrow = 10)
mat
rcpp_parallel_js_distance(mat)
mat <- matrix( runif(100), nrow = 10)
mat
rcpp_parallel_js_distance(mat)
mat <- matrix( runif(100), nrow = 10)
mat
rcpp_parallel_js_distance(mat)
mat <- matrix( runif(100), nrow = 10)
mat
rcpp_parallel_js_distance(mat)
mat <- matrix( runif(100), nrow = 10)
mat
rcpp_parallel_js_distance(mat)
mat <- matrix( runif(100), nrow = 10)
mat
rcpp_parallel_js_distance(mat)
mat <- matrix( runif(100), nrow = 10)
mat
rcpp_parallel_js_distance(mat)
mat <- matrix( runif(100), nrow = 10)
mat
rcpp_parallel_js_distance(mat)
mat <- matrix( runif(100), nrow = 10)
mat
rcpp_parallel_js_distance(mat)
mat <- matrix( runif(100), nrow = 10)
mat
rcpp_parallel_js_distance(mat)
mat <- matrix( runif(100), nrow = 10)
mat
rcpp_parallel_js_distance(mat)
mat <- matrix( runif(100), nrow = 10)
mat
rcpp_parallel_js_distance(mat)
mat <- matrix( runif(100), nrow = 10)
mat
rcpp_parallel_js_distance(mat)
mat <- matrix( runif(100), nrow = 10)
mat
rcpp_parallel_js_distance(mat)
mat <- matrix( runif(100), nrow = 10)
mat
rcpp_parallel_js_distance(mat)
mat <- matrix( runif(100), nrow = 10)
mat
rcpp_parallel_js_distance(mat)
mat <- matrix( runif(100), nrow = 10)
mat
rcpp_parallel_js_distance(mat)
mat <- matrix( runif(100), nrow = 10)
mat
rcpp_parallel_js_distance(mat)
mat <- matrix( runif(100), nrow = 10)
mat
rcpp_parallel_js_distance(mat)
mat <- matrix( runif(100), nrow = 10)
mat
rcpp_parallel_js_distance(mat)
mat <- matrix( runif(100), nrow = 10)
mat
rcpp_parallel_js_distance(mat)
mat <- matrix( runif(100), nrow = 10)
mat
rcpp_parallel_js_distance(mat)
mat <- matrix( runif(100), nrow = 10)
mat
rcpp_parallel_js_distance(mat)
mat <- matrix( runif(100), nrow = 10)
mat
rcpp_parallel_js_distance(mat)
mat <- matrix( runif(100), nrow = 10)
mat
rcpp_parallel_js_distance(mat)
mat <- matrix( runif(100), nrow = 10)
mat
rcpp_parallel_js_distance(mat)
mat <- matrix( runif(100), nrow = 10)
mat
rcpp_parallel_js_distance(mat)
mat <- matrix( runif(100), nrow = 10)
mat
rcpp_parallel_js_distance(mat)
mat <- matrix( runif(100), nrow = 10)
mat
rcpp_parallel_js_distance(mat)
mat <- matrix( runif(100), nrow = 10)
mat
rcpp_parallel_js_distance(mat)
mat <- matrix( runif(100), nrow = 10)
mat
rcpp_parallel_js_distance(mat)
mat <- matrix( runif(100), nrow = 10)
mat
rcpp_parallel_js_distance(mat)
mat <- matrix( runif(100), nrow = 10)
mat
rcpp_parallel_js_distance(mat)
mat <- matrix( runif(100), nrow = 10)
mat
rcpp_parallel_js_distance(mat)
mat <- matrix( runif(100), nrow = 10)
mat
rcpp_parallel_js_distance(mat)
mat <- matrix( runif(100), nrow = 10)
mat
rcpp_parallel_js_distance(mat)
mat <- matrix( runif(100), nrow = 10)
mat
rcpp_parallel_js_distance(mat)
mat <- matrix( runif(100), nrow = 10)
mat
rcpp_parallel_js_distance(mat)
mat <- matrix( runif(100), nrow = 10)
mat
rcpp_parallel_js_distance(mat)
mat <- matrix( runif(100), nrow = 10)
mat
rcpp_parallel_js_distance(mat)
mat <- matrix( runif(100), nrow = 10)
mat
rcpp_parallel_js_distance(mat)
mat <- matrix( runif(100), nrow = 10)
mat
rcpp_parallel_js_distance(mat)
mat <- matrix( runif(100), nrow = 10)
mat
rcpp_parallel_js_distance(mat)
mat <- matrix( runif(100), nrow = 10)
mat
rcpp_parallel_js_distance(mat)
mat <- matrix( runif(100), nrow = 10)
mat
rcpp_parallel_js_distance(mat)
mat <- matrix( runif(100), nrow = 10)
mat
rcpp_parallel_js_distance(mat)
mat <- matrix( runif(100), nrow = 10)
mat
rcpp_parallel_js_distance(mat)
mat <- matrix( runif(100), nrow = 10)
mat
rcpp_parallel_js_distance(mat)
mat <- matrix( runif(100), nrow = 10)
mat
rcpp_parallel_js_distance(mat)
mat <- matrix( runif(100), nrow = 10)
mat
rcpp_parallel_js_distance(mat)
mat <- matrix( runif(100), nrow = 10)
mat
rcpp_parallel_js_distance(mat)
mat <- matrix( runif(100), nrow = 10)
mat
rcpp_parallel_js_distance(mat)
mat <- matrix( runif(100), nrow = 10)
mat
rcpp_parallel_js_distance(mat)
mat <- matrix( runif(100), nrow = 10)
mat
rcpp_parallel_js_distance(mat)
mat <- matrix( runif(100), nrow = 10)
mat
rcpp_parallel_js_distance(mat)
mat <- matrix( runif(100), nrow = 10)
mat
rcpp_parallel_js_distance(mat)
mat <- matrix( runif(100), nrow = 10)
mat
rcpp_parallel_js_distance(mat)
mat <- matrix( runif(100), nrow = 10)
mat
rcpp_parallel_js_distance(mat)
mat <- matrix( runif(100), nrow = 10)
mat
rcpp_parallel_js_distance(mat)
mat <- matrix( runif(100), nrow = 10)
mat
rcpp_parallel_js_distance(mat)
mat <- matrix( runif(100), nrow = 10)
mat
rcpp_parallel_js_distance(mat)
mat <- matrix( runif(100), nrow = 10)
mat
rcpp_parallel_js_distance(mat)
mat <- matrix( runif(1000000), nrow = 1000)
dim(mat)
rcpp_parallel_js_distance(mat)
library(unbalancedTransport)
logSum <- c(1,2,3,4)
f <- c(1,2,3,4)
cm <- matrix(c(1,2,3,4,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0),nrow =21)
cm
parallelVectorLse(logSum, f, cm, 0.1,1)
parallelVectorLse(logSum, f, cm, 0.1,1)
parallelVectorLse(logSum, f, cm, 0.1,1)
parallelVectorLse(logSum, f, cm, 0.1,1)
parallelVectorLse(logSum, f, cm, 0.1,1)
parallelVectorLse(logSum, f, cm, 0.1,1)
parallelVectorLse(logSum, f, cm, 0.1,1)
parallelVectorLse(logSum, f, cm, 0.1,1)
parallelVectorLse(logSum, f, cm, 0.1,1)
parallelVectorLse(logSum, f, cm, 0.1,1)
parallelVectorLse(logSum, f, cm, 0.1,1)
parallelVectorLse(logSum, f, cm, 0.1,1)
parallelVectorLse(logSum, f, cm, 0.1,1)
parallelVectorLse(logSum, f, cm, 0.1,1)
parallelVectorLse(logSum, f, cm, 0.1,1)
parallelVectorLse(logSum, f, cm, 0.1,1)
parallelVectorLse(logSum, f, cm, 0.1,1)
parallelVectorLse(logSum, f, cm, 0.1,1)
parallelVectorLse(logSum, f, cm, 0.1,1)
parallelVectorLse(logSum, f, cm, 0.1,1)
parallelVectorLse(logSum, f, cm, 0.1,1)
parallelVectorLse(logSum, f, cm, 0.1,1)
parallelVectorLse(logSum, f, cm, 0.1,1)
parallelVectorLse(logSum, f, cm, 0.1,1)
parallelVectorLse(logSum, f, cm, 0.1,1)
parallelVectorLse(logSum, f, cm, 0.1,1)
parallelVectorLse(logSum, f, cm, 0.1,1)
parallelVectorLse(logSum, f, cm, 0.1,1)
parallelVectorLse(logSum, f, cm, 0.1,1)
parallelVectorLse(logSum, f, cm, 0.1,1)
parallelVectorLse(logSum, f, cm, 0.1,1)
parallelVectorLse(logSum, f, cm, 0.1,1)
parallelVectorLse(logSum, f, cm, 0.1,1)
parallelVectorLse(logSum, f, cm, 0.1,1)
parallelVectorLse(logSum, f, cm, 0.1,1)
parallelVectorLse(logSum, f, cm, 0.1,1)
parallelVectorLse(logSum, f, cm, 0.1,1)
parallelVectorLse(logSum, f, cm, 0.1,1)
for(i in 1:10000){
parallelVectorLse(logSum, f, cm, 0.1,1)
}
cm <- matrix(c(1,2,3,4,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0),nrow =7)
cm
for(i in 1:10000){
parallelVectorLse(logSum, f, cm, 0.1,1)
}
cm <- matrix(c(1,2,3,4,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0),nrow =3)
cm
for(i in 1:10000){
parallelVectorLse(logSum, f, cm, 0.1,1)
}
cm <- matrix(c(1,2,3,4,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0),nrow =1)
cm
for(i in 1:10000){
parallelVectorLse(logSum, f, cm, 0.1,1)
}
cm <- matrix(runi(1000),nrow =1)
cm
cm <- matrix(runif(1000),nrow =1)
cm
for(i in 1:10000){
parallelVectorLse(logSum, f, cm, 0.1,1)
}
library(unbalancedTransport)
logSum <- c(1,2,3,4)
f <- c(1,2,3,4)
cm <- matrix(runif(1000),nrow =1)
cm
logSum <- c(1,2,3,4)
f <- c(1,2,3,4)
cm <- matrix(runif(1000*4),nrow =4)
logFunc(logSum, f, cm, 0.1, 1000)
lll(logSum, f, cm, 1000)
lll <- function(logSum, f, cm, n){
vec <- c()
for(i in 1:n){
vec[i] <- 0.1 * log(sum(exp(logSum + (f - cm[,i])/0.1)))
}
return(vec)
}
lll(logSum, f, cm, 1000)
dd <- logFunc(logSum, f, cm, 0.1, 1000)
ddd <- lll(logSum, f, cm, 1000)
dd - ddd
mean(dd - ddd)
max(dd - ddd)
logSum <- c(1,2,3,4)
f <- c(1,2,3,4)
cm <- matrix(runif(10*4),nrow =4)
cm
dd <- logFunc(logSum, f, cm, 0.1, 10)
ddd <- lll(logSum, f, cm, 10)
max(dd - ddd)
parallelVectorLse(logSum, f, cm, 0.1,10)
dd
0.1*parallelVectorLse(logSum, f, cm, 0.1,10)
library(unbalancedTransport)
parallelVectorLse(logSum, f, cm, 0.1,10)
max(d - dd)
dd <- logFunc(logSum, f, cm, 0.1, 10)
ddd <- lll(logSum, f, cm, 10)
d <- parallelVectorLse(logSum, f, cm, 0.1,10)
max(d - dd)
max(d - ddd)
library(unbalancedTransport)
logSum <- c(1,2,3,4)
f <- c(1,2,3,4)
cm <- matrix(runif(10*4),nrow =4)
cm
d <- parallelVectorLse(logSum, f, cm, 0.1,10)
dd <- logFunc(logSum, f, cm, 0.1, 10)
ddd <- lll(logSum, f, cm, 10)
max(d - dd)
max(d - ddd)
timeP <- 0
timeNP <- 0
timeR <- 0
n <- 1000
logSum <- abs(rnorm(n))
f <- abs(rnorm(n))
cm <- abs(matrix(rnorm(n*n),nrow =n))
anP <- Sys.time()
ddd <- parallelVectorLse(logSum, f, cm, 0.1,n)
ddd
abP <- Sys.time()
timeP <- timeP + (abP - anP)
an <- Sys.time()
sss <- logFunc(logSum, f, cm, 0.1, n)
sss
ab <- Sys.time()
timeNP <- timeNP + (ab - an)
anR <- Sys.time()
vec <- c()
for(i in 1:n){
vec[i] <- 0.1 * log(sum(exp(logSum + (f - cm[,i])/0.1)))
}
vec
abR <- Sys.time()
timeR <- timeR + (abR - anR)
max(ddd - vec)
max(ddd- sss)
timeP <- 0
timeNP <- 0
timeR <- 0
for(i in 1:30){
n <- 1000
logSum <- abs(rnorm(n))
f <- abs(rnorm(n))
cm <- abs(matrix(rnorm(n*n),nrow =n))
anP <- Sys.time()
ddd <- parallelVectorLse(logSum, f, cm, 0.1,n)
abP <- Sys.time()
timeP <- timeP + (abP - anP)
an <- Sys.time()
sss <- logFunc(logSum, f, cm, 0.1, n)
ab <- Sys.time()
timeNP <- timeNP + (ab - an)
anR <- Sys.time()
vec <- c()
for(i in 1:n){
vec[i] <- 0.1 * log(sum(exp(logSum + (f - cm[,i])/0.1)))
}
abR <- Sys.time()
timeR <- timeR + (abR - anR)
max(ddd - vec)
max(ddd- sss)
}
timeNP
timeR
timeP
n <- 100000
logSum <- abs(rnorm(n))
f <- abs(rnorm(n))
cm <- abs(matrix(rnorm(n*n),nrow =n))
n <- 10000
logSum <- abs(rnorm(n))
f <- abs(rnorm(n))
cm <- abs(matrix(rnorm(n*n),nrow =n))
sss <- logFunc(logSum, f, cm, 0.1, n)
vec <- c()
for(i in 1:n){
vec[i] <- 0.1 * log(sum(exp(logSum + (f - cm[,i])/0.1)))
}
ddd <- parallelVectorLse(logSum, f, cm, 0.1,n)
library(logSumExp)
vec <- c()
for(i in 1:n){
vec[i] <- logSum + (f - cm[,i])/0.1
}
vec <- c()
for(i in 1:n){
vec[i] <- logSum + (f - cm[,i])/0.1
}
bb <- c()
for(i in 1:n){
bb <- logSum + (f - cm[,i])/0.1
}
vec <- c()
bb <- c()
for(i in 1:n){
bb <- logSum + (f - cm[,i])/0.1
vec[i] <- logSumExp::logSumExp(bb)
}
max(ddd - vec)
n <- 10
logSum <- abs(rnorm(n))
f <- abs(rnorm(n))
cm <- abs(matrix(rnorm(n*n),nrow =n))
anP <- Sys.time()
ddd <- parallelVectorLse(logSum, f, cm, 0.1,n)
abP <- Sys.time()
timeP <- timeP + (abP - anP)
anR <- Sys.time()
vec <- c()
bb <- c()
for(i in 1:n){
bb <- logSum + (f - cm[,i])/0.1
vec[i] <- logSumExp::logSumExp(bb)
}
abR <- Sys.time()
vec
sss
sss <- logFunc(logSum, f, cm, 0.1, n)
sss
vec <- c()
bb <- c()
for(i in 1:n){
bb <- logSum + (f - cm[,i])/0.1
vec[i] <- 0.1* logSumExp::logSumExp(bb)
}
vec
ddd
max(ddd - vec)
vec <- c()
for(i in 1:n){
vec[i] <- 0.1 * logSumExp(logSum + (f - cm[,i])/0.1)
}
max(ddd - vec)
n <- 10000
logSum <- abs(rnorm(n))
f <- abs(rnorm(n))
cm <- abs(matrix(rnorm(n*n),nrow =n))
