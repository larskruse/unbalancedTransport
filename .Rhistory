col=hcl.colors(20, palette = "YlOrRd", alpha = NULL, rev = TRUE, fixup = TRUE))
}else{
# Distance between import/export vectors and transport plan
emptyColRow <- max(1, ceiling(max(nrow(transportPlan), ncol(transportPlan))/40))
widthimpex <- max(1, ceiling(max(nrow(transportPlan), ncol(transportPlan))/100))
leftCol <- export
leftCol[(length(leftCol)+1):(length(leftCol)+widthimpex+emptyColRow)] <- NaN
leftCol <- matrix(rep(leftCol, widthimpex), ncol = widthimpex)
# Binding the import vector to the transport plan
addRows <- matrix(rep(NaN, ncol(transportPlan)*emptyColRow), ncol = ncol(transportPlan))
printObj <- rbind(transportPlan, addRows , matrix(rep(import, widthimpex), nrwo = widthimpex))
# Binding the export vector to the transport plan
addCols <- matrix(rep(NaN, nrow(printObj)*emptyColRow), nrow = nrow(printObj))
printObj <- cbind(leftCol, addCols, printObj)
printObj <- t(printObj[nrow(printObj):1,])
# Plotting the transport plan with import and export vectors
image(printObj, asp = 1, axes = FALSE, ylab = "Supply", xlab = "Demand",
col=hcl.colors(20, palette = "viridis", alpha = NULL, rev = TRUE, fixup = TRUE))
# Adding the labels and axes.
# att2 <- ((emptyColRow+1):(nrow(printObj)-1))/(nrow(printObj)-1)
# att2 <- att2[seq(1,length(att2), length.out = 10)]
# lab2 <- nrow(transportPlan):1
# lab2 <- lab2[seq(1, length(lab2), length.out = 10)]
# att1 <- ((emptyColRow+1):(ncol(printObj)-1))/(ncol(printObj)-1)
# att1 <- att1[seq(1,length(att1), length.out = 10)]
# lab1 <- 1:ncol(transportPlan)
# lab1 <- lab1[seq(1, length(lab1), length.out = 10)]
# Axis(side = 2, at = att2, labels = lab2)
# Axis(side = 1, at = att1, labels = lab1)
}
}
plotGridTransport(rr$transportPlan, rr$import, rr$export)
plotGridTransport <- function(transportPlan, import = NULL, export =  NULL){
# If no import or export vector is given, only the transport plan is plotted
if(is.null(import) | is.null(export)){
transportPlan <- t(transportPlan[(nrow(transportPlan)):1,])
image(transportPlan, asp = 1, axes = FALSE, ylab = "Supply", xlab = "Demand",
col=hcl.colors(20, palette = "YlOrRd", alpha = NULL, rev = TRUE, fixup = TRUE))
}else{
# Distance between import/export vectors and transport plan
emptyColRow <- max(1, ceiling(max(nrow(transportPlan), ncol(transportPlan))/40))
widthimpex <- max(1, ceiling(max(nrow(transportPlan), ncol(transportPlan))/100))
leftCol <- export
leftCol[(length(leftCol)+1):(length(leftCol)+widthimpex+emptyColRow)] <- NaN
leftCol <- matrix(rep(leftCol, widthimpex), ncol = widthimpex)
# Binding the import vector to the transport plan
addRows <- matrix(rep(NaN, ncol(transportPlan)*emptyColRow), ncol = ncol(transportPlan))
printObj <- rbind(transportPlan, addRows , matrix(rep(import, widthimpex), nrow = widthimpex))
# Binding the export vector to the transport plan
addCols <- matrix(rep(NaN, nrow(printObj)*emptyColRow), nrow = nrow(printObj))
printObj <- cbind(leftCol, addCols, printObj)
printObj <- t(printObj[nrow(printObj):1,])
# Plotting the transport plan with import and export vectors
image(printObj, asp = 1, axes = FALSE, ylab = "Supply", xlab = "Demand",
col=hcl.colors(20, palette = "viridis", alpha = NULL, rev = TRUE, fixup = TRUE))
# Adding the labels and axes.
# att2 <- ((emptyColRow+1):(nrow(printObj)-1))/(nrow(printObj)-1)
# att2 <- att2[seq(1,length(att2), length.out = 10)]
# lab2 <- nrow(transportPlan):1
# lab2 <- lab2[seq(1, length(lab2), length.out = 10)]
# att1 <- ((emptyColRow+1):(ncol(printObj)-1))/(ncol(printObj)-1)
# att1 <- att1[seq(1,length(att1), length.out = 10)]
# lab1 <- 1:ncol(transportPlan)
# lab1 <- lab1[seq(1, length(lab1), length.out = 10)]
# Axis(side = 2, at = att2, labels = lab2)
# Axis(side = 1, at = att1, labels = lab1)
}
}
plotGridTransport(rr$transportPlan, rr$import, rr$export)
plot1DTransport(rr$transportPlan, supply, demand)
s <- list(p,rep(0.1, I), X)
d <- list(q, rep(0.1,I), X)
rr <- umtp(s, d, exp = 2)
plotGridTransport(rr$transportPlan, rr$import, rr$export)
plotGridTransport <- function(transportPlan, import = NULL, export =  NULL){
# If no import or export vector is given, only the transport plan is plotted
if(is.null(import) | is.null(export)){
transportPlan <- t(transportPlan[(nrow(transportPlan)):1,])
image(transportPlan, asp = 1, axes = FALSE, ylab = "Supply", xlab = "Demand",
col=hcl.colors(20, palette = "YlOrRd", alpha = NULL, rev = TRUE, fixup = TRUE))
}else{
# Distance between import/export vectors and transport plan
emptyColRow <- max(1, ceiling(max(nrow(transportPlan), ncol(transportPlan))/40))
widthimpex <- max(1, ceiling(max(nrow(transportPlan), ncol(transportPlan))/100))
leftCol <- export
leftCol[(length(leftCol)+1):(length(leftCol)+widthimpex+emptyColRow)] <- NaN
leftCol <- matrix(rep(leftCol, widthimpex), ncol = widthimpex)
# Binding the import vector to the transport plan
addRows <- matrix(rep(NaN, ncol(transportPlan)*emptyColRow), ncol = ncol(transportPlan))
printObj <- rbind(transportPlan, addRows , t(matrix(rep(import, widthimpex), ncol = widthimpex)))
# Binding the export vector to the transport plan
addCols <- matrix(rep(NaN, nrow(printObj)*emptyColRow), nrow = nrow(printObj))
printObj <- cbind(leftCol, addCols, printObj)
printObj <- t(printObj[nrow(printObj):1,])
# Plotting the transport plan with import and export vectors
image(printObj, asp = 1, axes = FALSE, ylab = "Supply", xlab = "Demand",
col=hcl.colors(20, palette = "viridis", alpha = NULL, rev = TRUE, fixup = TRUE))
# Adding the labels and axes.
# att2 <- ((emptyColRow+1):(nrow(printObj)-1))/(nrow(printObj)-1)
# att2 <- att2[seq(1,length(att2), length.out = 10)]
# lab2 <- nrow(transportPlan):1
# lab2 <- lab2[seq(1, length(lab2), length.out = 10)]
# att1 <- ((emptyColRow+1):(ncol(printObj)-1))/(ncol(printObj)-1)
# att1 <- att1[seq(1,length(att1), length.out = 10)]
# lab1 <- 1:ncol(transportPlan)
# lab1 <- lab1[seq(1, length(lab1), length.out = 10)]
# Axis(side = 2, at = att2, labels = lab2)
# Axis(side = 1, at = att1, labels = lab1)
}
}
plotGridTransport(rr$transportPlan, rr$import, rr$export)
I <- 1000
X <- seq(0,1,length.out = I)
p <- supplyExample
q <- demandExample
supply <- list(p,rep(0.1, I), X)
demand <- list(q, rep(0.1,I), X)
res <- umtp(suply, demand, exp = 2)
res <- umtp(supply, demand, exp = 2)
plotGridTransport(res$transportPlan, res$import, res$export)
library(unbalancedTransport)
I <- 1000
X <- seq(0,1,length.out = I)
p <- supplyExample
q <- demandExample
supply <- list(p,rep(0.1, I), X)
demand <- list(q, rep(0.1,I), X)
res <- umtp(supply, demand, exp = 2)
plotGridTransport(res$transportPlan, res$import, res$export)
plot1DTransport(res$transportPlan, supply, demand)
supply <- list(p, X)
demand <- list(q, X)
plot1DTransport(res$transportPlan, supply, demand)
x <- c(0,1)
y <- c(0,1)
a <- c(1.5,0.0)
b <- c(0.0,1.0)
eps <- 0.1
reg <- list("Power", 10,0.7 )
res <- regularizedTransport(sup,dem, reg, reg, eps, maxIteration = 10000,
exp = 1, algorithm = "sinkhorn")
sup <- list(a,x)
dem <- list(b,y)
res <- regularizedTransport(sup,dem, reg, reg, eps, maxIteration = 10000,
exp = 1, algorithm = "sinkhorn")
res$TransportPlan
sequence <- seq(0.0001,10, length.out = 200)
power <- seq(-1, 0.9, length.out = 5)
Veps <- c(-1)
sup <- list(a, x)
dem <- list(b, y)
kk <- 0
cSc12 <- data.frame(matrix(rep(0, 1000*3), nrow = 1000))
cSc11 <- data.frame(matrix(rep(0, 1000*3), nrow = 1000))
cSc21 <- data.frame(matrix(rep(0, 1000*3), nrow = 1000))
cSc22 <- data.frame(matrix(rep(0, 1000*3), nrow = 1000))
cSi12 <- data.frame(matrix(rep(0, 1000*3), nrow = 1000))
cSi11 <- data.frame(matrix(rep(0, 1000*3), nrow = 1000))
cSi21 <- data.frame(matrix(rep(0, 1000*3), nrow = 1000))
cSi22 <- data.frame(matrix(rep(0, 1000*3), nrow = 1000))
colnames(cSc12) <- c("epsV", "reg", "mass")
colnames(cSc12) <- c("epsV", "reg", "mass")
colnames(cSc11) <- c("epsV", "reg", "mass")
colnames(cSc21) <- c("epsV", "reg", "mass")
colnames(cSc22) <- c("epsV", "reg", "mass")
colnames(cSi12) <- c("epsV", "reg", "mass")
colnames(cSi11) <- c("epsV", "reg", "mass")
colnames(cSi21) <- c("epsV", "reg", "mass")
colnames(cSi22) <- c("epsV", "reg", "mass")
dem <- list(b, y)
kk <- 0
for (j in 1:length(power)){
for(i in 1:length(sequence)){
print(kk)
kk <- kk + 1
eps <- 10^(seq(1, -1, length.out = 5))
reg <- list("Power", sequence[i], power[j])
res <- regularizedTransport(sup,dem, reg, reg, eps, maxIteration = 10000, tol = 1e-7, exp = 2,
algorithm = "sinkhorn")
#cSi11[kk, ] <- c(power[j], sequence[i], res$TransportPlan[1,1])
cSi12[kk, ] <- c(power[j], sequence[i], res$TransportPlan[1,2])
# cSi21[kk, ] <- c(power[j], sequence[i], res$TransportPlan[2,1])
# cSi22[kk, ] <- c(power[j], sequence[i], res$TransportPlan[2,2])
# res <- regularizedTransport(sup,dem, reg, reg, eps, maxIteration = 10000, tol = 1e-7, exp = 2,
#                             algorithm = "scaling")
#
# cSc11[kk, ] <- c(10^Veps[j], sequence[i], res$TransportPlan[1,1])
# cSc12[kk, ] <- c(10^Veps[j], sequence[i], res$TransportPlan[1,2])
# cSc21[kk, ] <- c(10^Veps[j], sequence[i], res$TransportPlan[2,1])
# cSc22[kk, ] <- c(10^Veps[j], sequence[i], res$TransportPlan[2,2])
}
}
library(unbalancedTransport)
sup <- list(a, x)
dem <- list(b, y)
kk <- 0
for (j in 1:length(power)){
for(i in 1:length(sequence)){
print(kk)
kk <- kk + 1
eps <- 10^(seq(1, -1, length.out = 5))
reg <- list("Power", sequence[i], power[j])
res <- regularizedTransport(sup,dem, reg, reg, eps, maxIteration = 10000, tol = 1e-7, exp = 2,
algorithm = "sinkhorn")
#cSi11[kk, ] <- c(power[j], sequence[i], res$TransportPlan[1,1])
cSi12[kk, ] <- c(power[j], sequence[i], res$TransportPlan[1,2])
# cSi21[kk, ] <- c(power[j], sequence[i], res$TransportPlan[2,1])
# cSi22[kk, ] <- c(power[j], sequence[i], res$TransportPlan[2,2])
# res <- regularizedTransport(sup,dem, reg, reg, eps, maxIteration = 10000, tol = 1e-7, exp = 2,
#                             algorithm = "scaling")
#
# cSc11[kk, ] <- c(10^Veps[j], sequence[i], res$TransportPlan[1,1])
# cSc12[kk, ] <- c(10^Veps[j], sequence[i], res$TransportPlan[1,2])
# cSc21[kk, ] <- c(10^Veps[j], sequence[i], res$TransportPlan[2,1])
# cSc22[kk, ] <- c(10^Veps[j], sequence[i], res$TransportPlan[2,2])
}
}
library(tidyverse)
library(ggplot2)
ggSi12 <- ggplot(cSi12,aes(x = reg , y = mass, colour = factor(epsV)))+
geom_line()+
ylab("Transported Mass")+
xlab("Regularization Parameter \u03BB ")+
ggtitle("")+ labs(colour = "Exponent") +
theme(text = element_text(size=25), legend.position = c(0.85, 0.2) )
ggSi12
power <- seq(-1, 0.9, length.out = 5)
power
power <- seq(-1, 0.9, length.out = 6)
power
power <- seq(-1.1, 0.9, length.out = 6)
power
power <- seq(-1, 0.8, length.out = 6)
power
power <- seq(-1, 0.8, length.out = 5)
power
power <- seq(-1, 0.5, length.out = 5)
power
power <- seq(-1, 0.75, length.out = 5)
power
power <- seq(-1, 0.75, length.out = 6)
power
Veps <- c(-1)
sup <- list(a, x)
dem <- list(b, y)
kk <- 0
for (j in 1:length(power)){
for(i in 1:length(sequence)){
print(kk)
kk <- kk + 1
eps <- 10^(seq(1, -1, length.out = 5))
reg <- list("Power", sequence[i], power[j])
res <- regularizedTransport(sup,dem, reg, reg, eps, maxIteration = 10000, tol = 1e-7, exp = 2,
algorithm = "sinkhorn")
#cSi11[kk, ] <- c(power[j], sequence[i], res$TransportPlan[1,1])
cSi12[kk, ] <- c(power[j], sequence[i], res$TransportPlan[1,2])
# cSi21[kk, ] <- c(power[j], sequence[i], res$TransportPlan[2,1])
# cSi22[kk, ] <- c(power[j], sequence[i], res$TransportPlan[2,2])
# res <- regularizedTransport(sup,dem, reg, reg, eps, maxIteration = 10000, tol = 1e-7, exp = 2,
#                             algorithm = "scaling")
#
# cSc11[kk, ] <- c(10^Veps[j], sequence[i], res$TransportPlan[1,1])
# cSc12[kk, ] <- c(10^Veps[j], sequence[i], res$TransportPlan[1,2])
# cSc21[kk, ] <- c(10^Veps[j], sequence[i], res$TransportPlan[2,1])
# cSc22[kk, ] <- c(10^Veps[j], sequence[i], res$TransportPlan[2,2])
}
}
ggSi12 <- ggplot(cSi12,aes(x = reg , y = mass, colour = factor(epsV)))+
geom_line()+
ylab("Transported Mass")+
xlab("Regularization Parameter \u03BB ")+
ggtitle("")+ labs(colour = "Exponent") +
theme(text = element_text(size=25), legend.position = c(0.85, 0.2) )
ggSi12
power
epsV
ggSi12 <- ggplot(cSi12,aes(x = reg , y = mass, colour = factor(epsV)))+
geom_line()+
ylab("Transported Mass")+
xlab("Regularization Parameter \u03BB ")+
ggtitle("")+ labs(colour = "Exponent") +
theme(text = element_text(size=25), legend.position = c(0.85, 0.2) )
ggSi12
power <- seq(-1, 0.75, length.out = 6)
power
Veps <- c(-1)
sup <- list(a, x)
dem <- list(b, y)
kk <- 0
kk <- 0
for (j in 1:length(power)){
for(i in 1:length(sequence)){
print(kk)
print(power[j])
kk <- kk + 1
eps <- 10^(seq(1, -1, length.out = 5))
reg <- list("Power", sequence[i], power[j])
res <- regularizedTransport(sup,dem, reg, reg, eps, maxIteration = 10000, tol = 1e-7, exp = 2,
algorithm = "sinkhorn")
#cSi11[kk, ] <- c(power[j], sequence[i], res$TransportPlan[1,1])
cSi12[kk, ] <- c(power[j], sequence[i], res$TransportPlan[1,2])
# cSi21[kk, ] <- c(power[j], sequence[i], res$TransportPlan[2,1])
# cSi22[kk, ] <- c(power[j], sequence[i], res$TransportPlan[2,2])
# res <- regularizedTransport(sup,dem, reg, reg, eps, maxIteration = 10000, tol = 1e-7, exp = 2,
#                             algorithm = "scaling")
#
# cSc11[kk, ] <- c(10^Veps[j], sequence[i], res$TransportPlan[1,1])
# cSc12[kk, ] <- c(10^Veps[j], sequence[i], res$TransportPlan[1,2])
# cSc21[kk, ] <- c(10^Veps[j], sequence[i], res$TransportPlan[2,1])
# cSc22[kk, ] <- c(10^Veps[j], sequence[i], res$TransportPlan[2,2])
}
}
ggSi12 <- ggplot(cSi12,aes(x = reg , y = mass, colour = factor(epsV)))+
geom_line()+
ylab("Transported Mass")+
xlab("Regularization Parameter \u03BB ")+
ggtitle("")+ labs(colour = "Exponent") +
theme(text = element_text(size=25), legend.position = c(0.85, 0.2) )
ggSi12
power
power[4]
power[4] <- 0.05
sup <- list(a, x)
dem <- list(b, y)
kk <- 0
for (j in 1:length(power)){
for(i in 1:length(sequence)){
print(kk)
print(power[j])
kk <- kk + 1
eps <- 10^(seq(1, -1, length.out = 5))
reg <- list("Power", sequence[i], power[j])
res <- regularizedTransport(sup,dem, reg, reg, eps, maxIteration = 10000, tol = 1e-7, exp = 2,
algorithm = "sinkhorn")
#cSi11[kk, ] <- c(power[j], sequence[i], res$TransportPlan[1,1])
cSi12[kk, ] <- c(power[j], sequence[i], res$TransportPlan[1,2])
# cSi21[kk, ] <- c(power[j], sequence[i], res$TransportPlan[2,1])
# cSi22[kk, ] <- c(power[j], sequence[i], res$TransportPlan[2,2])
# res <- regularizedTransport(sup,dem, reg, reg, eps, maxIteration = 10000, tol = 1e-7, exp = 2,
#                             algorithm = "scaling")
#
# cSc11[kk, ] <- c(10^Veps[j], sequence[i], res$TransportPlan[1,1])
# cSc12[kk, ] <- c(10^Veps[j], sequence[i], res$TransportPlan[1,2])
# cSc21[kk, ] <- c(10^Veps[j], sequence[i], res$TransportPlan[2,1])
# cSc22[kk, ] <- c(10^Veps[j], sequence[i], res$TransportPlan[2,2])
}
}
ggSi12 <- ggplot(cSi12,aes(x = reg , y = mass, colour = factor(epsV)))+
geom_line()+
ylab("Transported Mass")+
xlab("Regularization Parameter \u03BB ")+
ggtitle("")+ labs(colour = "Exponent") +
theme(text = element_text(size=25), legend.position = c(0.85, 0.2) )
ggSi12
x <- c(0,1)
y <- c(0,1)
a <- c(1.5,0.0)
b <- c(0.0,1.0)
eps <- 0.1
x <- c(0,1)
y <- c(0,1)
a <- c(1.5,0.0)
b <- c(0.0,1.0)
sup <- list(a,x)
dem <- list(b,y)
eps <- 0.1
reg <- list("KL", 1.5 )
res <- regularizedTransport(sup,dem, reg, reg, eps, maxIteration = 10000,
exp = 1, algorithm = "sinkhorn")
res$TransportPlan
res <- regularizedTransport(sup,dem, reg, reg, eps, maxIteration = 10000,
exp = 1)
res$TransportPlan
res <- regularizedTransport(sup,dem, reg, reg, eps, maxIteration = 10000,
exp = 1, algorithm = "sinkhorn")
res$TransportPlan
sinkhorn_divergence(sup,dem,reg, eps)
hausdorff_divergence(supplyList, demandList, reg, eps)
supplyList <- list(a,x)
demandList <- list(b,y)
eps <- 0.1
reg <- list("KL", 1.5 )
sinkhorn_divergence(supplyList,demandList,reg, eps)
hausdorff_divergence(supplyList, demandList, reg, eps)
library(unbalancedTransport)
library(unbalancedTransport)
I <- 1000
J <- 1000
X <- seq(0,1,length.out = I)
Y <- seq(0,1,length.out = J)
p <- supplyExample
q <- demandExample
supply <- list(p,X)
demand <- list(q,Y)
maxIter <- 200
eps <- 1e-3
suppyDiv <- list("KL", 0.04)
demandDiv <- list("KL", 0.04)
res <- regularizedTransport(supply, demand, suppyDiv, demandDiv,
maxIteration = maxIter, epsVector = eps, p = 2)
plot1DTransport(res$TransportPlan, supply, demand)
maxIter <- 2000
res <- regularizedTransport(supply, demand, suppyDiv, demandDiv,
maxIteration = maxIter, epsVector = eps, p = 2)
plot1DTransport(res$TransportPlan, supply, demand)
I <- 200
J <- 200
X <- seq(0,1,length.out = I)
Y <- seq(0,1,length.out = J)
p <- supplyExample[seq(0,1000,by = 1000/I)]
q <- demandExample[seq(0,1000, by = 1000/J)]
supply <- list(p,X)
demand <- list(q,Y)
maxIter <- 200
eps <- 1e-3
suppyDiv <- list("KL", 0.04)
demandDiv <- list("KL", 0.04)
res <- regularizedTransport(supply, demand, suppyDiv, demandDiv,
maxIteration = maxIter, epsVector = eps, p = 2)
plotGridTransport(res$TransportPlan)
supplyPoints <- matrix(c(0,0,0,1), ncol = 2)
demandPoints <- matrix(c(3.5,4,1,0.2), ncol = 2)
creationCost <- rep(1.8,2)
destructionCost <- rep(2,2)
supplyMass <- c(1,2)
demandMass <- c(2.5,1)
supplyList <- list(supplyMass, destructionCost,supplyPoints)
demandList <- list(demandMass, creationCost, demandPoints)
res <- umtp(supplyList, demandList)
transportPlan <- res$transportPlan
plotTransportPoints(transportPlan, supplyList, demandList)
tree <- list(1, c(1, 2, 1), c(2, 3, 1), c(3, 4, 1), c(3, 5, 1),
c(2, 6, 1), c(1, 7, 1), c(7, 8, 1), c(7, 9, 1),
c(9, 10, 1), c(9, 11, 1), c(11, 12, 1), c(11, 13, 1))
plotTree(tree)
supply <- c(0,0,1,2,0,0,0,0,0,0,0,0,0)
demand <- c(0,0,0,0,0,1,0,1,0,0,0,1,1)
plotTree(tree, supply = supply, demand = demand)
tList = list(c(3,6,1), c(4,8,1))
plotTree(tree, tList, supply, demand)
I <- 1000
J <- 1000
X <- seq(0,1,length.out = I)
Y <- seq(0,1,length.out = J)
p <- supplyExample
q <- demandExample
supply <- list(p,X)
demand <- list(q,Y)
maxIter <- 100
eps <- 1e-3
suppyDiv <- list("KL", 0.04)
demandDiv <- list("KL", 0.04)
res <- regularizedTransport(supply, demand, suppyDiv, demandDiv,
maxIteration = maxIter, epsVector = eps, exp = 2)
plot1DTransport(res$TransportPlan, supply, demand)
x <- c(0,1)
y <- c(0,1)
a <- c(1.5,0.0)
b <- c(0.0,1.0)
supplyList <- list(a,x)
demandList <- list(b,y)
eps <- 0.1
reg <- list("KL", 1.5 )
sinkhorn_divergence(supplyList,demandList,reg, eps)
tree <- list(1, c(1,2,1), c(2,3,1), c(2,4,1), c(1,5,1), c(5,6,1),
c(5,7,1), c(1,8,10), c(8,9,1), c(8,10,1))
constructionCost <- rep(2,10)
destructionCost <- rep(2,10)
supply <- c(0,0,2,0,0,4,0,0,2,0)
demand <- c(0,0,0,0,5,0,0,0,0,1)
supplyList = list(supply, destructionCost)
demandList = list(demand, constructionCost)
transport <- treeTransport(tree, supplyList, demandList,
output = "list")
plotTree(tree, tList = transport$transportList,
supply = supply, demand = demand)
tree <- list(1, c(1,2,1), c(2,3,1), c(3,4,1), c(3,5,1), c(2,6,1),
c(1,7,1), c(7,8,1), c(7,9,1), c(9,10,1), c(9,11,1),
c(11,12,1), c(11,13,1))
constructionCost <- rep(2,13)
destructionCost <- rep(1,13)
supply <- c(0,0,1,2,0,0,0,0,0,0,0,0,0)
demand <- c(0,0,0,0,0,1,0,1,0,0,0,1,1)
supplyList = list(supply, destructionCost)
demandList = list(demand, constructionCost)
transport <- treeTransport(tree, supplyList, demandList,
output = "list")
plotTree(tree, tList = transport$transportList,
supply = supply, demand = demand)
plotTree(tree, tList = transport$transportList,
supply = supply, demand = demand)
supplyPoints <- matrix(c(0,0,0,0,1,2), ncol = 2)
demandPoints <- matrix(c(3,3.5,4,1.7,1,0.2), ncol = 2)
p <- c(2,1,2)
q <- c(1,2,3)
costCreate <- rep(10,3)
costDestruct <- rep(10,3)
supplyList <- list(p,costDestruct, supplyPoints)
demandList <- list(q,costCreate, demandPoints)
umtp(supplyList, demandList, exp = 2)
library(unbalancedTransport)
library(unbalancedTransport)
library(unbalancedTransport)
library(unbalancedTransport)
use_mit_license()
usethis::use_mit_license("Lars Kruse")
library(unbalancedTransport)
library(unbalancedTransport)
library(torch)
detach("package:torch", unload = TRUE)
library(unbalancedTransport)
library(unbalancedTransport)
