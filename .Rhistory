Y <- seq(0,1,length.out = J)
p <- supplyExample
p <- p * 1000
q <- demandExample
q <- q * 1000
q <- q/sum(q)*sum(p)
supply <- list(p,X)
demand <- list(q,Y)
supply
res2 <- regularizedTransport(supply, demand, suppyDiv, demandDiv,
maxIteration = maxIter, epsVector = eps, exp = 2)
res2$TransportPlan
plot1DTransport(res2$TransportPlan, list(p*sd, X),list(q*sd, X))
abab <- res2$TransportPlan*sda
sd <- rep(1/1000,1000)
sda <- sd %*% t(sd)
abab <- res2$TransportPlan*sda
plot1DTransport(abab, list(p*sd, X),list(q*sd, X))
I <- 1000
J <- 1000
X <- seq(0,1,length.out = I)
Y <- seq(0,1,length.out = J)
p <- supplyExample
q <- demandExample
q <- q/sum(q)*sum(p)
supply <- list(p,X)
demand <- list(q,Y)
sum(p)
sum(q)
maxIter <- 1000
eps <- c(0.1,0.005,0.001,0.0005,0.0001)
suppyDiv <- list("KL", 1.05)
demandDiv <- list("KL", 1.05)
res2 <- regularizedTransport(supply, demand, suppyDiv, demandDiv,
maxIteration = maxIter, epsVector = eps, exp = 2)
abab <- res2$TransportPlan*sda
plot1DTransport(abab, list(p*sd, X),list(q*sd, X))
suppyDiv <- list("TV", 0.05)
demandDiv <- list("TV", 0.05)
res2 <- regularizedTransport(supply, demand, suppyDiv, demandDiv,
maxIteration = maxIter, epsVector = eps, exp = 2)
abab <- res2$TransportPlan*sda
plot1DTransport(abab, list(p*sd, X),list(q*sd, X))
library(unbalancedTransport)
res2 <- regularizedTransport(supply, demand, suppyDiv, demandDiv,
maxIteration = maxIter, epsVector = eps, exp = 2)
plot1DTransport(res2$TransportPlan, supply, demand)
suppyDiv <- list("KL", 1.05)
demandDiv <- list("KL", 1.05)
res2 <- regularizedTransport(supply, demand, suppyDiv, demandDiv,
maxIteration = maxIter, epsVector = eps, exp = 2)
plot1DTransport(res2$TransportPlan, supply, demand)
I <- 1000
J <- 1000
X <- seq(0,1,length.out = I)
Y <- seq(0,1,length.out = J)
p <- supplyExample
q <- demandExample
q <- q/sum(q)*sum(p)
supply <- list(p,X)
demand <- list(q,Y)
maxIter <- 10000
eps <- c(0.1,0.005,0.001,0.0005,0.0001)
res2 <- regularizedTransport(supply, demand, suppyDiv, demandDiv,
maxIteration = maxIter, epsVector = eps, exp = 2)
plot1DTransport(res2$TransportPlan, supply, demand)
library(unbalancedTransport)
tamtam <- p %*% t(q)
image(tamtam)
library(unbalancedTransport)
I <- 1000
J <- 1000
X <- seq(0,1,length.out = I)
Y <- seq(0,1,length.out = J)
p <- supplyExample
q <- demandExample
q <- q/sum(q)*sum(p)
supply <- list(p,X)
demand <- list(q,Y)
sum(p)
sum(q)
maxIter <- 10000
eps <- c(0.1,0.005,0.001,0.0005,0.0001)
suppyDiv <- list("KL", 1.05)
demandDiv <- list("KL", 1.05)
res2 <- regularizedTransport(supply, demand, suppyDiv, demandDiv,
maxIteration = maxIter, epsVector = eps, exp = 2)
image(res2$TransportPlan)
plot1DTransport(res2$TransportPlan, supply, demand)
plot1DTransport((res2$TransportPlan*tamtam), supply, demand)
plot1DTransport(res2$TransportPlan, supply, demand)
x <- c(0,1)
p <- c(2,0)
q <- c(0,1)
p %*% t(q)
regs <- list("KL", 1.)
regd <- list("KL", 1.)
eps <- c(0.01)
maxIter <- 100
s <- list(p,x)
d <- list(q,x)
res2 <- regularizedTransport(s,d,regs,regd, eps, maxIteration =  maxIter, duals = TRUE)
res2$TransportPlan
res1$TransportPlan
tamtam <- p %*% t(q)
tamtam
res1$TransportPlan*tamtam
res2$TransportPlan*tamtam
res1$TransportPlan
res2$TransportPlan*tamtam
maxIter <- 1000
s <- list(p,x)
d <- list(q,x)
res1 <- regularizedTransport(s,d,regs,regd, eps, maxIteration = maxIter, duals = TRUE, algorithm =  "sinkhorn")
res2 <- regularizedTransport(s,d,regs,regd, eps, maxIteration =  maxIter, duals = TRUE)
res1$TransportPlan
res2$TransportPlan*tamtam
res2$TransportPlan
res1$TransportPlan
res2$TransportPlan
p <- c(1,0)
q <- c(0,1)
p %*% t(q)
regs <- list("KL", 1.)
regd <- list("KL", 1.)
eps <- c(0.01)
maxIter <- 1000
s <- list(p,x)
d <- list(q,x)
res1 <- regularizedTransport(s,d,regs,regd, eps, maxIteration = maxIter, duals = TRUE, algorithm =  "sinkhorn")
res2 <- regularizedTransport(s,d,regs,regd, eps, maxIteration =  maxIter, duals = TRUE)
res1$TransportPlan
res2$TransportPlan
p <- c(2,0)
q <- c(0,1)
regs <- list("KL", 1.)
regd <- list("KL", 1.)
eps <- c(0.01)
maxIter <- 1000
s <- list(p,x)
d <- list(q,x)
res1 <- regularizedTransport(s,d,regs,regd, eps, maxIteration = maxIter, duals = TRUE, algorithm =  "sinkhorn")
res2 <- regularizedTransport(s,d,regs,regd, eps, maxIteration =  maxIter, duals = TRUE)
res1$TransportPlan
res2$TransportPlan
exp(-50)
library(unbalancedTransport)
x <- c(0,1)
p <- c(1,0)
q <- c(0,1)
regs <- list("KL", 1.)
regd <- list("KL", 1.)
eps <- c(0.01)
maxIter <- 1000
s <- list(p,x)
d <- list(q,x)
res1 <- regularizedTransport(s,d,regs,regd, eps, maxIteration = maxIter, duals = TRUE, algorithm =  "sinkhorn")
res2 <- regularizedTransport(s,d,regs,regd, eps, maxIteration =  maxIter, duals = TRUE)
res1$TransportPlan
res2$TransportPlan
res1$TransportCost
res2$cost
res2$DualCost
library(unbalancedTransport)
x <- c(0,1)
p <- c(1,0)
q <- c(0,1)
p %*% t(q)
regs <- list("KL", 1.)
regd <- list("KL", 1.)
eps <- c(0.01)
maxIter <- 1000
s <- list(p,x)
d <- list(q,x)
res2 <- regularizedTransport(s,d,regs,regd, eps, maxIteration =  maxIter, duals = TRUE)
res1 <- regularizedTransport(s,d,regs,regd, eps, maxIteration = maxIter, duals = TRUE, algorithm =  "sinkhorn")
res2$cost
res2$DualCost
p <- c(2,0)
q <- c(0,1)
regs <- list("KL", 1.)
regd <- list("KL", 1.)
eps <- c(0.01)
maxIter <- 1000
s <- list(p,x)
d <- list(q,x)
res1 <- regularizedTransport(s,d,regs,regd, eps, maxIteration = maxIter, duals = TRUE, algorithm =  "sinkhorn")
res2 <- regularizedTransport(s,d,regs,regd, eps, maxIteration =  maxIter, duals = TRUE)
res2$cost
res2$DualCost
res1$TransportCost
res1 <- regularizedTransport(s,d,regs,regd, eps, maxIteration = maxIter, duals = TRUE, algorithm =  "sinkhorn")
res1$TransportCost
res2$cost
library(unbalancedTransport)
res1 <- regularizedTransport(s,d,regs,regd, eps, maxIteration = maxIter, duals = TRUE, algorithm =  "sinkhorn")
I <- 1000
J <- 1000
X <- seq(0,1,length.out = I)
Y <- seq(0,1,length.out = J)
p <- supplyExample
p <- p * 1000
q <- demandExample
q <- q * 1000
q <- q/sum(q)*sum(p)
supply <- list(p,X)
demand <- list(q,Y)
sum(p)
sum(q)
000
J <- 1000
X <- seq(0,1,length.out = I)
Y <- seq(0,1,length.out = J)
p <- supplyExample
q <- demandExample
q <- q/sum(q)*sum(p)
supply <- list(p,X)
demand <- list(q,Y)
sum(p)
sum(q)
maxIter <- 10000
eps <- c(0.1,0.005,0.001,0.0005,0.0001)
suppyDiv <- list("KL", 1.05)
demandDiv <- list("KL", 1.05)
res2 <- regularizedTransport(supply, demand, suppyDiv, demandDiv,
maxIteration = maxIter, epsVector = eps, exp = 2)
eps <- c(0.1,0.005,0.001)
res2 <- regularizedTransport(supply, demand, suppyDiv, demandDiv,
maxIteration = maxIter, epsVector = eps, exp = 2)
eps <- c(0.1, 0.01,0.005)
res2 <- regularizedTransport(supply, demand, suppyDiv, demandDiv,
maxIteration = maxIter, epsVector = eps, exp = 2)
res1 <- regularizedTransport(supply, demand, suppyDiv, demandDiv,
maxIteration = maxIter, epsVector = eps, exp = 2, algorithm = "sinkhorn")
library(unbalancedTransport)
maxIter <- 100
res2 <- regularizedTransport(supply, demand, suppyDiv, demandDiv,
maxIteration = maxIter, epsVector = eps, exp = 2)
res1 <- regularizedTransport(supply, demand, suppyDiv, demandDiv,
maxIteration = maxIter, epsVector = eps, exp = 2, algorithm = "sinkhorn")
res2$cost
res2$DualCost
maxIter <- 1000
res2 <- regularizedTransport(supply, demand, suppyDiv, demandDiv,
maxIteration = maxIter, epsVector = eps, exp = 2)
res2$cost
res2$DualCost
res1 <- regularizedTransport(supply, demand, suppyDiv, demandDiv,
maxIteration = maxIter, epsVector = eps, exp = 2, algorithm = "sinkhorn")
maxIter <- 10000
res2 <- regularizedTransport(supply, demand, suppyDiv, demandDiv,
maxIteration = maxIter, epsVector = eps, exp = 2)
res1 <- regularizedTransport(supply, demand, suppyDiv, demandDiv,
maxIteration = maxIter, epsVector = eps, exp = 2, algorithm = "sinkhorn")
install.packages("torch")
library(torch)
x <- array(c(1,2,34))
x
library(torch)
y <- torch_tensor(x)
y
y.logsumexp()
y.torch_logsumexp()
torch::torch_logsumexp(y)
torch_logsumexp(y,1)
as_array(torch_logsumexp(y,1))
logsumexpTorch <- function(matrix){
return(torch::as_array(torch::torch_logsumexp(torch::torch_tensor(matrix))))
}
logsumexpTorch(c(1,23,4,5,3,3))
matrix = (matrix(c(1,23,4,5,3,3), nrow =1))
matrix
torch::torch_tensor(matrix)
torch::torch_logsumexp(torch::torch_tensor(matrix))
rlang::last_error
a <- torch::torch_tensor(matrix)
torch_logsumexp(a)
matrix <- matrix(c(1,23,4,5,3,3), nrow =1)
matrix <- array(matrix)
matrix
matrix <- matrix(c(1,23,4,5,3,3), nrow =1)
matrix
matrix <- array(matrix)
matrix
matrix <- array(matrix, dim = 2)
matrix
matrix <- matrix(c(1,23,4,5,3,3), nrow =2)
matrix <- array(matrix, dim = 2)
matrix
matrix <- matrix(c(1,23,4,5,3,3), nrow =2)
matrix
matrix <- array(matrix, dim = 2)
matrix
matrix <- array(matrix, dim = 3)
matrix
matrix <- matrix(c(1,23,4,5,3,3), nrow =2)
matrix
matrix <- array(matrix, dim = 3)
matrix <- matrix(c(1,23,4,5,3,3), nrow =2)
matrix
matrix <- array(matrix, dim = 3)
matrix
matrix <- array(matrix, dim = 3)
matrix
matrix <- array(matrix, dim = c(2,3))
matrix
matrix <- matrix(c(1,23,4,5,3,3), nrow =2)
matrix <- array(matrix, dim = dim(matrix))
matrix
a <- torch::torch_tensor(matrix)
a
torch_logsumexp(a)
a
x <- array(c(1,2,34))
y <- torch_tensor(x)
y
torch::torch_logsumexp(y)
library(torch)
x <- array(c(1,2,34))
y <- torch_tensor(x)
y
torch::torch_logsumexp(y)
as_array(torch_logsumexp(y,1))
torch::torch_logsumexp(y,1)
a <- torch::torch_tensor(matrix, 1)
a <- torch::torch_tensor(matrix, 1)
matrix <- matrix(c(1,23,4,5,3,3), nrow =2)
matrix
matrix <- array(matrix, dim = dim(matrix))
matrix
a <- torch::torch_tensor(matrix, 1)
matrix
a <- torch::torch_tensor(matrix, c(1,2))
a = torch_randn(c(3, 3))
torch_logsumexp(a, 1)
a
torch_logsumexp(a, 1)
matrix <- matrix(c(1,23,4,5,3,3), nrow =2)
matrix
matrix <- array(matrix, dim = dim(matrix))
matrix
matrix <- torch_tensor(matrix)
matrix
a <- torch_logsumexp(matrix, 1)
a
a <- torch_logsumexp(matrix, 2)
a
matrix <- matrix(c(1,23,4,5,3,3), nrow =2)
matrix
matrix <- array(matrix, dim = dim(matrix))
matrix <- torch_tensor(matrix)
matrix
a <- torch_logsumexp(matrix, 2)
a
matrix
log(exp(1)+exp(4)+exp(3))
logsumexpTorch <- function(matrix){
matrix <- torch::as_array(torch::torch_tensor(torch::torch_tensor(
array(matrix, dim = dim(matrix))), 2))
return(matrix)
}
matrix <- matrix(c(1,23,4,5,3,3), nrow =2)
logsumexpTorch(matrix)
matrix <- matrix(c(1,23,4,5,3,3), nrow =2)
matrix <- array(matrix, dim = dim(matrix))
matrix <- matrix(c(1,23,4,5,3,3), nrow =2)
matrix <- array(matrix, dim = dim(matrix))
matrix
matrix <- torch_tensor(matrix)
matrix
logsumexpTorch <- function(matrix){
matrix <- array(matrix, dim = dim(matrix))
matrix <- torch_tensor(matrix)
a <- torch_logsumexp(matrix, 2)
return(torch::as_array(a))
}
matrix <- matrix(c(1,23,4,5,3,3), nrow =2)
logsumexpTorch(matrix)
matrix <- matrix(c(1,23,4,5,3,3), nrow =2)
matrix
log(exp(23)+exp(5)+exp(3))
log(exp(23)+exp(5)+exp(3))
logsumexpTorch(matrix)
logsumexpTorch <- function(matrix){
#matrix <- array(matrix, dim = dim(matrix))
matrix <- torch_tensor(array(matrix, dim = dim(matrix)))
a <- torch_logsumexp(matrix, 2)
return(torch::as_array(a))
}
matrix <- matrix(c(1,23,4,5,3,3), nrow =2)
logsumexpTorch(matrix)
logsumexpTorch <- function(matrix){
#matrix <- array(matrix, dim = dim(matrix))
#matrix <- torch_tensor(array(matrix, dim = dim(matrix)))
a <- torch_logsumexp(torch_tensor(array(matrix, dim = dim(matrix))), 2)
return(torch::as_array(a))
}
matrix <- matrix(c(1,23,4,5,3,3), nrow =2)
logsumexpTorch(matrix)
logsumexpTorch <- function(matrix){
#matrix <- array(matrix, dim = dim(matrix))
#matrix <- torch_tensor(array(matrix, dim = dim(matrix)))
#a <- torch_logsumexp(torch_tensor(array(matrix, dim = dim(matrix))), 2)
return(torch::as_array(torch_logsumexp(torch_tensor(array(matrix, dim = dim(matrix))), 2)))
}
matrix <- matrix(c(1,23,4,5,3,3), nrow =2)
logsumexpTorch(matrix)
library(unbalancedTransport)
x <- c(0,1)
p <- c(2,0)
q <- c(0,1)
p %*% t(q)
regs <- list("KL", 1.)
regd <- list("KL", 1.)
eps <- c(0.01)
maxIter <- 1000
s <- list(p,x)
d <- list(q,x)
res2 <- regularizedTransport(s,d,regs,regd, eps, maxIteration =  maxIter, duals = TRUE)
res1$TransportPlan
res2$TransportPlan
res1 <- regularizedTransport(s,d,regs,regd, eps, maxIteration = maxIter, duals = TRUE, algorithm =  "sinkhorn")
maxIter <- 2
res1 <- regularizedTransport(s,d,regs,regd, eps, maxIteration = maxIter, duals = TRUE, algorithm =  "sinkhorn")
library(unbalancedTransport)
res1 <- regularizedTransport(s,d,regs,regd, eps, maxIteration = maxIter, duals = TRUE, algorithm =  "sinkhorn")
library(unbalancedTransport)
res1 <- regularizedTransport(s,d,regs,regd, eps, maxIteration = maxIter, duals = TRUE, algorithm =  "sinkhorn")
library(unbalancedTransport)
res1 <- regularizedTransport(s,d,regs,regd, eps, maxIteration = maxIter, duals = TRUE, algorithm =  "sinkhorn")
library(unbalancedTransport)
res1 <- regularizedTransport(s,d,regs,regd, eps, maxIteration = maxIter, duals = TRUE, algorithm =  "sinkhorn")
library(unbalancedTransport)
x <- array(c(-Inf))
y <- torch_tensor(x)
y
torch::torch_logsumexp(y,1)
x <- c(0,1)
p <- c(2,0)
q <- c(0,1)
regs <- list("KL", 1.)
regd <- list("KL", 1.)
eps <- c(0.01)
maxIter <- 2
s <- list(p,x)
d <- list(q,x)
res1 <- regularizedTransport(s,d,regs,regd, eps, maxIteration = maxIter, duals = TRUE, algorithm =  "sinkhorn")
x <- array(c(-168.622, -Inf))
y <- torch_tensor(x)
y
torch::torch_logsumexp(y,1)
x <- array(c(-168.622, -68.6216))
y <- torch_tensor(x)
y
torch::torch_logsumexp(y,1)
library(unbalancedTransport)
res1 <- regularizedTransport(s,d,regs,regd, eps, maxIteration = maxIter, duals = TRUE, algorithm =  "sinkhorn")
res1$TransportPlan
maxIter <- 1000
res1 <- regularizedTransport(s,d,regs,regd, eps, maxIteration = maxIter, duals = TRUE, algorithm =  "sinkhorn")
res1$TransportPlan
library(unbalancedTransport)
maxIter <- 1000
s <- list(p,x)
d <- list(q,x)
res1 <- regularizedTransport(s,d,regs,regd, eps, maxIteration = maxIter, duals = TRUE, algorithm =  "sinkhorn")
x <- c(0,1)
p <- c(2,0)
q <- c(0,1)
p %*% t(q)
regs <- list("KL", 1.)
regd <- list("KL", 1.)
eps <- c(0.01)
maxIter <- 1000
s <- list(p,x)
d <- list(q,x)
res1 <- regularizedTransport(s,d,regs,regd, eps, maxIteration = maxIter, duals = TRUE, algorithm =  "sinkhorn")
maxIter <- 10000
res1 <- regularizedTransport(s,d,regs,regd, eps, maxIteration = maxIter, duals = TRUE, algorithm =  "sinkhorn")
maxIter <- 100000
res1 <- regularizedTransport(s,d,regs,regd, eps, maxIteration = maxIter, duals = TRUE, algorithm =  "sinkhorn")
library(unbalancedTransport)
x <- c(0,1)
p <- c(2,0)
q <- c(0,1)
p %*% t(q)
regs <- list("KL", 1.)
regd <- list("KL", 1.)
eps <- c(0.01)
maxIter <- 100000
s <- list(p,x)
d <- list(q,x)
res1 <- regularizedTransport(s,d,regs,regd, eps, maxIteration = maxIter, duals = TRUE, algorithm =  "sinkhorn")
I <- 1000
J <- 1000
X <- seq(0,1,length.out = I)
Y <- seq(0,1,length.out = J)
p <- supplyExample
q <- demandExample
q <- q/sum(q)*sum(p)
supply <- list(p,X)
demand <- list(q,Y)
sum(p)
sum(q)
maxIter <- 10000
eps <- c(0.1, 0.01,0.005)
suppyDiv <- list("KL", 1.05)
demandDiv <- list("KL", 1.05)
res2 <- regularizedTransport(supply, demand, suppyDiv, demandDiv,
maxIteration = maxIter, epsVector = eps, exp = 2)
res1 <- regularizedTransport(supply, demand, suppyDiv, demandDiv,
maxIteration = maxIter, epsVector = eps, exp = 2, algorithm = "sinkhorn")
