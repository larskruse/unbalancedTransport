}
}
}
# for (i in 1:dim){
#     lines(x = creationDestructionCost[i] * cos(theta) + x[i], y = creationDestructionCost[i] * sin(theta) + y[i], col = "grey")
#
#     for (j in 1:dim){
#         if (transportPlan[[i,j]]>0 && i != j){
#             curvedarrow(c(x[i],y[i]),c(x[j],y[j]), lwd = 0.5+transportPlan[[i,j]],
#                         arr.pos = 0.5, arr.adj = 0.5, arr.type = "triangle",
#                         curve = 0.2)
#         }
#     }
# }
}
points(c(xS,xD), c(yS,yD) , pch = 1)
points(xS[which(supply > 0 )],yS[which(supply > 0)],
pch = 19, cex = supply[which(supply > 0)],  col = "chartreuse3")
points(xD[which(demand > 0 )],yD[which(demand > 0)], pch = 19,
cex = abs(demand[which(demand > 0)]),  col = "dodgerblue3")
# if a transport plan is given, add arrows to indicate mass transport
if(!is.null(transportPlan)){
# plot circles as indicators for the creation/destruction cost
theta = seq(0, 2 * pi, length = 200)
for(i in 1:length(xS)){
lines(x = destructionCost[i]*cos(theta) + xS[i], y = destructionCost[i]*sin(theta) + yS[i])
}
for(i in 1:length(xD)){
lines(x = creationCost[i]*cos(theta) + xD[i], y = creationCost[i]*sin(theta) + yD[i])
}
}
# add the points
}
plotTransportPoints(plan, supply = sup, demand = dem, supplyCoordinates = supplyPoints, demandCoordinates =  demandPoints,
creationCost = cC, destructionCost = cD)
plotTransportPoints <- function(transportPlan, supply = NULL, demand = NULL, supplyCoordinates = NULL, demandCoordinates = NULL,
creationCost = rep(0, length(x)), destructionCost = rep(0, length(x))){
if(is.null(dim(supplyCoordinates))){
xS <- supplyCoordinates
yS <- rep(0, length(supplyCoordinates))
xD <- demandCoordinates
yD <- rep(0,length(demandCoordinates))
}else{
xS <- supplyCoordinates[,1]
yS <- supplyCoordinates[,2]
xD <- demandCoordinates[,1]
yD <- demandCoordinates[,2]
}
# create an empty plot
plot(1, type = "n", xlab = "", ylab = "",
xlim = c(min(c(xS,xD))-0.3*abs(max(c(xS,xD))-min(c(xS,xD))),max(c(xS,xD))+0.3*abs(max(c(xS,xD))-min(c(xS,xD)))),
ylim =c(min(c(yS,yD))-0.3*abs(max(c(yS,yD))-min(c(yS,yD))),max(c(yS,yD))+0.3*abs(max(c(yS,yD))-min(c(yS,yD)))),
asp = 1)
if(!is.null(transportPlan)){
for(i in 1:length(xS)){
for(j in 1:length(xD)){
if(transportPlan[i,j] > 0){
curvedarrow(c(xS[i],yS[i]),c(xD[j],yD[j]), lwd = 0.5+transportPlan[[i,j]],
arr.pos = 0.5, arr.adj = 0.5, arr.type = "triangle",
curve = 0.5, lcol = "red", arr.col = "red")
}
}
}
}
points(c(xS,xD), c(yS,yD) , pch = 1)
points(xS[which(supply > 0 )],yS[which(supply > 0)],
pch = 19, cex = supply[which(supply > 0)],  col = "chartreuse3")
points(xD[which(demand > 0 )],yD[which(demand > 0)], pch = 19,
cex = abs(demand[which(demand > 0)]),  col = "dodgerblue3")
# if a transport plan is given, add arrows to indicate mass transport
if(!is.null(transportPlan)){
# plot circles as indicators for the creation/destruction cost
theta = seq(0, 2 * pi, length = 200)
for(i in 1:length(xS)){
lines(x = destructionCost[i]*cos(theta) + xS[i], y = destructionCost[i]*sin(theta) + yS[i])
}
for(i in 1:length(xD)){
lines(x = creationCost[i]*cos(theta) + xD[i], y = creationCost[i]*sin(theta) + yD[i])
}
}
# add the points
}
plotTransportPoints(plan, supply = sup, demand = dem, supplyCoordinates = supplyPoints, demandCoordinates =  demandPoints,
creationCost = cC, destructionCost = cD)
plotTransportPoints <- function(transportPlan, supply = NULL, demand = NULL, supplyCoordinates = NULL, demandCoordinates = NULL,
creationCost = rep(0, length(x)), destructionCost = rep(0, length(x))){
if(is.null(dim(supplyCoordinates))){
xS <- supplyCoordinates
yS <- rep(0, length(supplyCoordinates))
xD <- demandCoordinates
yD <- rep(0,length(demandCoordinates))
}else{
xS <- supplyCoordinates[,1]
yS <- supplyCoordinates[,2]
xD <- demandCoordinates[,1]
yD <- demandCoordinates[,2]
}
# create an empty plot
plot(1, type = "n", xlab = "", ylab = "",
xlim = c(min(c(xS,xD))-0.3*abs(max(c(xS,xD))-min(c(xS,xD))),max(c(xS,xD))+0.3*abs(max(c(xS,xD))-min(c(xS,xD)))),
ylim =c(min(c(yS,yD))-0.3*abs(max(c(yS,yD))-min(c(yS,yD))),max(c(yS,yD))+0.3*abs(max(c(yS,yD))-min(c(yS,yD)))),
asp = 1)
if(!is.null(transportPlan)){
for(i in 1:length(xS)){
for(j in 1:length(xD)){
if(transportPlan[i,j] > 0){
curvedarrow(c(xS[i],yS[i]),c(xD[j],yD[j]), lwd = 0.5+transportPlan[[i,j]],
arr.pos = 0.5, arr.adj = 0.5, arr.type = "triangle",
curve = 0.2, lcol = "red", arr.col = "red")
}
}
}
}
points(c(xS,xD), c(yS,yD) , pch = 1)
points(xS[which(supply > 0 )],yS[which(supply > 0)],
pch = 19, cex = supply[which(supply > 0)],  col = "chartreuse3")
points(xD[which(demand > 0 )],yD[which(demand > 0)], pch = 19,
cex = abs(demand[which(demand > 0)]),  col = "dodgerblue3")
# if a transport plan is given, add arrows to indicate mass transport
if(!is.null(transportPlan)){
# plot circles as indicators for the creation/destruction cost
theta = seq(0, 2 * pi, length = 200)
for(i in 1:length(xS)){
lines(x = destructionCost[i]*cos(theta) + xS[i], y = destructionCost[i]*sin(theta) + yS[i])
}
for(i in 1:length(xD)){
lines(x = creationCost[i]*cos(theta) + xD[i], y = creationCost[i]*sin(theta) + yD[i])
}
}
# add the points
}
plotTransportPoints(plan, supply = sup, demand = dem, supplyCoordinates = supplyPoints, demandCoordinates =  demandPoints,
creationCost = cC, destructionCost = cD)
plotTransportPoints <- function(transportPlan, supply = NULL, demand = NULL, supplyCoordinates = NULL, demandCoordinates = NULL,
creationCost = rep(0, length(x)), destructionCost = rep(0, length(x))){
if(is.null(dim(supplyCoordinates))){
xS <- supplyCoordinates
yS <- rep(0, length(supplyCoordinates))
xD <- demandCoordinates
yD <- rep(0,length(demandCoordinates))
}else{
xS <- supplyCoordinates[,1]
yS <- supplyCoordinates[,2]
xD <- demandCoordinates[,1]
yD <- demandCoordinates[,2]
}
# create an empty plot
plot(1, type = "n", xlab = "", ylab = "",
xlim = c(min(c(xS,xD))-0.3*abs(max(c(xS,xD))-min(c(xS,xD))),max(c(xS,xD))+0.3*abs(max(c(xS,xD))-min(c(xS,xD)))),
ylim =c(min(c(yS,yD))-0.3*abs(max(c(yS,yD))-min(c(yS,yD))),max(c(yS,yD))+0.3*abs(max(c(yS,yD))-min(c(yS,yD)))),
asp = 1)
if(!is.null(transportPlan)){
for(i in 1:length(xS)){
for(j in 1:length(xD)){
if(transportPlan[i,j] > 0){
curvedarrow(c(xS[i],yS[i]),c(xD[j],yD[j]), lwd = 0.5+transportPlan[[i,j]],
arr.pos = 0.5, arr.adj = 0.5, arr.type = "triangle",
curve = 0.2, lcol = "red", arr.col = "red")
}
}
}
}
points(c(xS,xD), c(yS,yD) , pch = 1)
points(xS[which(supply > 0 )],yS[which(supply > 0)],
pch = 19, cex = supply[which(supply > 0)],  col = "chartreuse3")
points(xD[which(demand > 0 )],yD[which(demand > 0)], pch = 19,
cex = abs(demand[which(demand > 0)]),  col = "dodgerblue3")
# if a transport plan is given, add arrows to indicate mass transport
if(!is.null(transportPlan)){
# plot circles as indicators for the creation/destruction cost
theta = seq(0, 2 * pi, length = 200)
for(i in 1:length(xS)){
lines(x = destructionCost[i]*cos(theta) + xS[i], y = destructionCost[i]*sin(theta) + yS[i])
}
for(i in 1:length(xD)){
lines(x = creationCost[i]*cos(theta) + xD[i], y = creationCost[i]*sin(theta) + yD[i])
}
}
}
plotTransportPoints(plan, supply = sup, demand = dem, supplyCoordinates = supplyPoints, demandCoordinates =  demandPoints,
creationCost = cC, destructionCost = cD)
plotTransportPoints(plan, supply = sup, demand = dem, supplyCoordinates = sp, demandCoordinates =  dP,
creationCost = cC, destructionCost = cD)
sP <- c(0,1,2)
dP <- c(4,5,6)
plotTransportPoints(plan, supply = sup, demand = dem, supplyCoordinates = sP, demandCoordinates =  dP,
creationCost = cC, destructionCost = cD)
library(unbalancedTransport)
library(unbalancedTransport)
library(unbalancedTransport)
I <- 1000
J <- 1000
X <- seq(0,1,length.out = I)
Y <- seq(0,1,length.out = J)
p <- supplyExample
q <- demandExample
supply <- list(p,X)
demand <- list(q,Y)
eps <- 1e-3
maxiter = 3000
tol = 1e-5
eps <- 1e-3
maxiter = 3000
tol = 1e-5
supplyList <- list(p, "KL", 0.1, X)
demandList <- list(q, "KL", 0.1, Y)
sinkhorn_divergence(supplyList, demandList, eps, maxiter, tol = tol, exp = 2)
supplyList <- list(p, "TV", 0.1, X)
demandList <- list(q, "TV", 0.1, Y)
sinkhorn_divergence(supplyList, demandList, eps, maxiter, tol = tol, exp = 2)
supplyList <- list(p, "KL", 0.1, X)
demandList <- list(q, "KL", 0.1, Y)
sinkhorn_divergence(supplyList, demandList, eps, maxiter, tol = tol, exp = 2)
supplyList <- list(p, "Berg", 0.1, X)
demandList <- list(q, "Berg", 0.1, Y)
sinkhorn_divergence(supplyList, demandList, eps, maxiter, tol = tol, exp = 2)
supplyList <- list(p, "RG", 0.7, 1.3, X)
demandList <- list(q, "RG", 0.7, 1.3, Y)
sinkhorn_divergence(supplyList, demandList, eps, maxiter, tol = tol, exp = 2)
eps <- 1e-3
maxiter = 3000
tol = 1e-5
supplyList <- list(p, "TV", 0.1, X)
demandList <- list(q, "TV", 0.1, Y)
regularized_ot(supplyList, demandList, eps, maxiter, tol = tol, exp = 2)
supplyList <- list(p, "KL", 0.1, X)
demandList <- list(q, "KL", 0.1, Y)
regularized_ot(supplyList, demandList, eps, maxiter, tol = tol, exp = 2)
supplyList <- list(p, "Berg", 0.1, X)
demandList <- list(q, "Berg", 0.1, Y)
regularized_ot(supplyList, demandList, eps, maxiter, tol = tol, exp = 2)
supplyList <- list(p, "RG", 0.7, 1.3, X)
demandList <- list(q, "RG", 0.7, 1.3, Y)
regularized_ot(supplyList, demandList, eps, maxiter, tol = tol, exp = 2)
eps <- 1e-3
maxiter = 3000
tol = 1e-5
supplyList <- list(p, "TV", 0.1, X)
demandList <- list(q, "TV", 0.1, Y)
hausdorff_divergence(supplyList, demandList, eps, maxiter, tol = tol, exp = 2)
supplyList <- list(p, "KL", 0.1, X)
demandList <- list(q, "KL", 0.1, Y)
hausdorff_divergence(supplyList, demandList, eps, maxiter, tol = tol, exp = 2)
supplyList <- list(p, "Berg", 0.1, X)
demandList <- list(q, "Berg", 0.1, Y)
hausdorff_divergence(supplyList, demandList, eps, maxiter, tol = tol, exp = 2)
supplyList <- list(p, "RG", 0.7, 1.3, X)
demandList <- list(q, "RG", 0.7, 1.3, Y)
hausdorff_divergence(supplyList, demandList, eps, maxiter, tol = tol, exp = 2)
library(unbalancedTransport)
library(unbalancedTransport)
library(unbalancedTransport)
library(unbalancedTransport)
library(transport)
library(unbalancedTransport)
supplyPoints <- matrix(c(0,0,0,0,1,2), ncol = 2)
demandPoints <- matrix(c(3,3.5,4,1.7,1,0.2), ncol = 2)
cC <- rep(1,3)
cD <- rep(1.5,3)
sup <- c(1,2,3)
dem <- c(2,3,1)
plan <- matrix(rep(0,12), nrow = 3 )
plan[1,3] <- 1
plan[2,2] <- 1
plan[2,3] <- 1
plan[3,1] <- 1
plotTransportPoints(plan, supply = sup, demand = dem,
supplyCoordinates = supplyPoints, demandCoordinates =  demandPoints,
creationCost = cC, destructionCost = cD)
cC <- rep(1.5,3)
cD <- rep(1.5,3)
sup <- c(1,2,3)
dem <- c(2,3,1)
plan <- matrix(rep(0,12), nrow = 3 )
plan[1,3] <- 1
plan[2,2] <- 1
plan[2,3] <- 1
plan[3,1] <- 1
plotTransportPoints(plan, supply = sup, demand = dem,
supplyCoordinates = supplyPoints, demandCoordinates =  demandPoints,
creationCost = cC, destructionCost = cD)
plotTransportPoints(plan, supply = sup, demand = dem,
supplyCoordinates = supplyPoints, demandCoordinates =  demandPoints)
plan <- BalancedExtensionSolver(list(sup,supplyPoints), list(dem, demandPoints))
plan <- BalancedExtensionSolver(list(sup, cD,supplyPoints), list(dem, cC, demandPoints))
plan <- BalancedExtensionSolver(list(sup, cD,supplyPoints), list(dem, cC, demandPoints))
plan
cC <- rep(1.5,3)
cD <- rep(2,3)
sup <- c(1,2,3)
dem <- c(2,3,1)
plan <- BalancedExtensionSolver(list(sup, cD,supplyPoints), list(dem, cC, demandPoints))
plan
cC <- rep(1.8,3)
cD <- rep(2,3)
sup <- c(1,2,3)
dem <- c(2,3,1)
plan <- BalancedExtensionSolver(list(sup, cD,supplyPoints), list(dem, cC, demandPoints))
plan
plotTransportPoints(plan, supply = sup, demand = dem,
supplyCoordinates = supplyPoints, demandCoordinates =  demandPoints)
plotTransportPoints(plan$transportPlan, supply = sup, demand = dem,
supplyCoordinates = supplyPoints, demandCoordinates =  demandPoints)
#' plan[2,2] <- 1
#' plan[2,3] <- 1
#' plan[3,1] <- 1
#'
#'
#' plotTransportPoints(plan, supply = sup, demand = dem,
#'  supplyCoordinates = supplyPoints, demandCoordinates =  demandPoints,
#'     costCreate = cC, costDestruct = cD)
#'
#' @export
plotTransportPoints <- function(transportPlan, supply = NULL, demand = NULL,
supplyCoordinates = NULL, demandCoordinates = NULL,
costCreate = NULL, costDestruct = NULL){
if(is.null(costCreate)){
costCreate <- rep(0, ncol(transportPlan))
}
if(is.null(costDestruct)){
costDestruct <- rep(0, nrow(transportPlan))
}
if(is.null(dim(supplyCoordinates))){
xS <- supplyCoordinates
yS <- rep(0, length(supplyCoordinates))
xD <- demandCoordinates
yD <- rep(0,length(demandCoordinates))
}else{
xS <- supplyCoordinates[,1]
yS <- supplyCoordinates[,2]
xD <- demandCoordinates[,1]
yD <- demandCoordinates[,2]
}
# create an empty plot
plot(1, type = "n", xlab = "", ylab = "",
xlim = c(min(c(xS,xD))-0.3*abs(max(c(xS,xD))-min(c(xS,xD))),max(c(xS,xD))+0.3*abs(max(c(xS,xD))-min(c(xS,xD)))),
ylim =c(min(c(yS,yD))-0.3*abs(max(c(yS,yD))-min(c(yS,yD))),max(c(yS,yD))+0.3*abs(max(c(yS,yD))-min(c(yS,yD)))),
asp = 1)
if(!is.null(transportPlan)){
for(i in 1:length(xS)){
for(j in 1:length(xD)){
if(transportPlan[i,j] > 0){
curvedarrow(c(xS[i],yS[i]),c(xD[j],yD[j]), lwd = 0.5+transportPlan[[i,j]],
arr.pos = 0.5, arr.adj = 0.5, arr.type = "triangle",
curve = 0.2, lcol = "red", arr.col = "red")
}
}
}
}
points(c(xS,xD), c(yS,yD) , pch = 1)
points(xS[which(supply > 0 )],yS[which(supply > 0)],
pch = 19, cex = supply[which(supply > 0)],  col = "chartreuse3")
points(xD[which(demand > 0 )],yD[which(demand > 0)], pch = 19,
cex = abs(demand[which(demand > 0)]),  col = "dodgerblue3")
# if a transport plan is given, add arrows to indicate mass transport
if(!is.null(transportPlan)){
# plot circles as indicators for the creation/destruction cost
theta = seq(0, 2 * pi, length = 200)
for(i in 1:length(xS)){
lines(x = costDestruct[i]*cos(theta) + xS[i], y = costDestruct[i]*sin(theta) + yS[i])
}
for(i in 1:length(xD)){
lines(x = costCreate[i]*cos(theta) + xD[i], y = costCreate[i]*sin(theta) + yD[i])
}
}
}
plotTransportPoints(plan$transportPlan, supply = sup, demand = dem,
supplyCoordinates = supplyPoints, demandCoordinates =  demandPoints, costCreate = cC, costDestruct = cD)
library(unbalancedTransport)
supplyPoints <- matrix(c(0,0,0,0,1,2), ncol = 2)
demandPoints <- matrix(c(3,3.5,4,1.7,1,0.2), ncol = 2)
cC <- rep(1.8,3)
cD <- rep(2,3)
sup <- c(1,2,3)
dem <- c(2,3,1)
plan <- BalancedExtensionSolver(list(sup, cD,supplyPoints), list(dem, cC, demandPoints))
plan
plotTransportPoints(plan$transportPlan, supply = sup, demand = dem,
supplyCoordinates = supplyPoints, demandCoordinates =  demandPoints, costCreate = cC, costDestruct = cD)
library(unbalancedTransport)
library(unbalancedTransport)
supplyPoints <- matrix(c(0,0,0,0,1,2), ncol = 2)
demandPoints <- matrix(c(3,3.5,4,1.7,1,0.2), ncol = 2)
cC <- rep(1.8,3)
cD <- rep(2,3)
sup <- c(1,2,3)
dem <- c(2,3,1)
plan <- BalancedExtensionSolver(list(sup, cD,supplyPoints), list(dem, cC, demandPoints))
plan
plotTransportPoints(plan$transportPlan, supply = sup, demand = dem,
supplyCoordinates = supplyPoints, demandCoordinates =  demandPoints, costCreate = cC, costDestruct = cD)
library(unbalancedTransport)
library(unbalancedTransport)
library(unbalancedTransport)
supplyPoints <- matrix(c(0,0,0,0,1,2), ncol = 2)
demandPoints <- matrix(c(3,3.5,4,1.7,1,0.2), ncol = 2)
cC <- rep(1.8,3)
cD <- rep(2,3)
sup <- c(1,2,3)
dem <- c(2,3,1)
plan <- BalancedExtensionSolver(list(sup, cD,supplyPoints), list(dem, cC, demandPoints))
plan
plotTransportPoints(plan$transportPlan, supply = sup, demand = dem,
supplyCoordinates = supplyPoints, demandCoordinates =  demandPoints, costCreate = cC, costDestruct = cD)
library(unbalancedTransport)
library(unbalancedTransport)
plotTransportPoints(plan$transportPlan, supply = sup, demand = dem,
supplyCoordinates = supplyPoints, demandCoordinates =  demandPoints, costCreate = cC, costDestruct = cD)
library(unbalancedTransport)
supplyPoints <- matrix(c(0,0,0,0,1,2), ncol = 2)
demandPoints <- matrix(c(3,3.5,4,1.7,1,0.2), ncol = 2)
cC <- rep(1.8,3)
cD <- rep(2,3)
sup <- c(1,2,3)
dem <- c(2,3,1)
plan <- BalancedExtensionSolver(list(sup, cD,supplyPoints), list(dem, cC, demandPoints))
plan
plotTransportPoints(plan$transportPlan, supply = sup, demand = dem,
supplyCoordinates = supplyPoints, demandCoordinates =  demandPoints, costCreate = cC, costDestruct = cD)
supplyPoints <- matrix(c(0,0,0,1), ncol = 2)
demandPoints <- matrix(c(3.5,4,1,0.2), ncol = 2)
cC <- rep(1.8,3)
cD <- rep(2,3)
sup <- c(1,2)
dem <- c(3,1)
plan <- BalancedExtensionSolver(list(sup, cD,supplyPoints), list(dem, cC, demandPoints))
supplyPoints
supplyPoints <- matrix(c(0,0,0,1), ncol = 2)
demandPoints <- matrix(c(3.5,4,1,0.2), ncol = 2)
cC <- rep(1.8,2)
cD <- rep(2,2)
sup <- c(1,2)
dem <- c(3,1)
plan <- BalancedExtensionSolver(list(sup, cD,supplyPoints), list(dem, cC, demandPoints))
plan
plotTransportPoints(plan$transportPlan, supply = sup, demand = dem,
supplyCoordinates = supplyPoints, demandCoordinates =  demandPoints, costCreate = cC, costDestruct = cD)
demandPoints <- matrix(c(3.5,4,1,0.2), ncol = 2)
supplyPoints <- matrix(c(0,0,0,1), ncol = 2)
demandPoints <- matrix(c(3.5,4,1,0.2), ncol = 2)
cC <- rep(1.8,2)
cD <- rep(2,2)
sup <- c(1,2)
dem <- c(2.5,1)
plan <- BalancedExtensionSolver(list(sup, cD,supplyPoints), list(dem, cC, demandPoints))
plan
plotTransportPoints(plan$transportPlan, supply = sup, demand = dem,
supplyCoordinates = supplyPoints, demandCoordinates =  demandPoints, costCreate = cC, costDestruct = cD)
library(unbalancedTransport)
library(unbalancedTransport)
plotTransportPoints(plan$transportPlan, supply = sup, demand = dem,
supplyCoordinates = supplyPoints, demandCoordinates =  demandPoints, costCreate = cC, costDestruct = cD)
transport <- matrix(runif(9), nrow = 3)
import <- runif(3)
export <- runif(3)
plotGridTransport(transport)
plotGridTransport(transport, import, export)
I <- 1000
J <- 1000
X <- seq(0,1,length.out = I)
Y <- seq(0,1,length.out = J)
p <- supplyExample
q <- demandExample
supply <- list(p,X)
demand <- list(q,Y)
maxIter <- 2000
eps <- 1e-3
suppyDiv <- list("KL", 0.04)
demandDiv <- list("KL", 0.04)
res <- regularizedTransport(supply, demand, suppyDiv, demandDiv,
maxIteration = maxIter, epsVector = eps, p = 2)
plot1DTransport(res$TransportPlan, supply, demand)
eps <- seq(-1,-7, length.out = 10)
eps
eps <- 10^-eps
eps
eps <- 10^eps
suppyDiv <- list("KL", 0.04)
demandDiv <- list("KL", 0.04)
res <- regularizedTransport(supply, demand, suppyDiv, demandDiv,
maxIteration = maxIter, epsVector = eps, p = 2)
plot1DTransport(res$TransportPlan, supply, demand)
eps <- seq(-1,-6, length.out = 10)
eps <- 10^eps
suppyDiv <- list("KL", 0.04)
demandDiv <- list("KL", 0.04)
res <- regularizedTransport(supply, demand, suppyDiv, demandDiv,
maxIteration = maxIter, epsVector = eps, p = 2)
supply <- list(p,X)
demand <- list(q,Y)
maxIter <- 2000
eps <- seq(-1,-6, length.out = 10)
eps <- 10^eps
suppyDiv <- list("KL", 0.04)
demandDiv <- list("KL", 0.04)
res <- regularizedTransport(supply, demand, suppyDiv, demandDiv,
maxIteration = maxIter, epsVector = eps, p = 2)
plot1DTransport(res$TransportPlan, supply, demand)
maxIter <- 20000
res <- regularizedTransport(supply, demand, suppyDiv, demandDiv,
maxIteration = maxIter, epsVector = eps, p = 2)
res <- regularizedTransport(supply, demand, suppyDiv, demandDiv,
maxIteration = maxIter, epsVector = eps, p = 2)
library(unbalancedTransport)
library(unbalancedTransport)
res <- regularizedTransport(supply, demand, suppyDiv, demandDiv,
maxIteration = maxIter, epsVector = eps, p = 2)
library(unbalancedTransport)
library(unbalancedTransport)
library(unbalancedTransport)
library(unbalancedTransport)
library(unbalancedTransport)
