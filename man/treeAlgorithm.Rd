% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/AlgorithmTree.R
\name{treeAlgorithm}
\alias{treeAlgorithm}
\title{Transport on Trees}
\usage{
treeAlgorithm(
  tree,
  supply,
  demand,
  creationCost,
  destructionCost,
  output = "transportPlan"
)
}
\arguments{
\item{tree}{A tree structure in list format:
The first element is the index of the root node.
The other elements are vectors defining the edges of the tree. Each of these vectors has to be 
 of the form \eqn{(parent_node_index, child_node_index, edge_weight)}.}

\item{supply}{A non negative numeric supply vector.}

\item{demand}{A non negative numeric demand vector}

\item{creationCost}{A non negative vector giving the cost to create mass at each node.}

\item{destructionCost}{A non negative vector giving the cost to destruct mass at each node.}

\item{output}{Determines the format of the output:
\itemize{
\item "transportPlan" give a standard transport plan matrix where the value at \eqn{i,j} gives the amount of mass transported from 
note \eqn{i} to \eqn{j}.
\item "list" gives a list of vectors. Each vector holds three entries: The first gives the supply node, the second the target node of the transport
and the third the amount of mass transported between those nodes.
\item "cost" returns only the transport cost
}}
}
\value{
A list containing the transport cost, the mass import and export vectors, and the transport list or plan if specified in 'output'.
}
\description{
Solving unbalanced optimal transport problems on trees.
}
\details{
This function can be used to solve unbalanced optimal transport problems that use a tree metric as cost function.
If the cost matrix is derived from a tree metric, the unbalanced optimal transport problem  \eqn{\min_r <C,r> + \sum_i p_i(\alpha_i - \sum_j r_{ij}) + \sum_j q_j(\beta-\sum_i r{ij})}{
min_r <C,r> + sum_i(p_i (a-sum_j r_ij)) + sum_j(q_j (b-sum_i r_ij))} with supply and demand measure \eqn{\alpha}{a} and \eqn{\beta}{b}
, transport plan \eqn{r}, construction and destruction costs \eqn{p} and \eqn{q} and cost matrix \eqn{C} can be solved efficiently in
O(n logÂ²n) time. The C++ implementation of the algorithm used in this package can be found at https://github.com/joisino/treegkr. It was updated in order to make it accessible 
from R and to be able to compute the transport map. 


\insertRef{Sato2020}{unbalancedTransport}
}
\examples{

tree <- list(1, c(1,2,1), c(2,3,1), c(2,4,1), c(1,5,1), c(5,6,1),
                c(5,7,1), c(1,8,10), c(8,9,1), c(8,10,1))

constructionCost <- rep(2,13)
destructionCost <- rep(2,13)

supply <- c(0,0,2,0,0,4,0,0,2,0)
demand <- c(0,0,0,0,7,0,0,0,0,1)

transport <- treeAlgorithm(tree, supply, demand,
                           constructionCost, destructionCost,
                           output = "list")

plotTree(tree, tList = transport$transportList,
         supply = supply, demand = demand)




tree <- list(1, c(1,2,1), c(2,3,1), c(3,4,1), c(3,5,1), c(2,6,1),
               c(1,7,1), c(7,8,1), c(7,9,1), c(9,10,1), c(9,11,1),
               c(11,12,1), c(11,13,1))


constructionCost <- rep(2,13)
destructionCost <- rep(1,13)


supply <- c(0,0,1,2,0,0,0,0,0,0,0,0,0)
demand <- c(0,0,0,0,0,1,0,1,0,0,0,1,1)

transport <- treeAlgorithm(tree, supply, demand,
                           constructionCost, destructionCost,
                           output = "list")

plotTree(tree, tList = transport$transportList,
         supply = supply, demand = demand)

}
