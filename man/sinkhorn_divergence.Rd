% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/SinkhornDivergence.R
\name{sinkhorn_divergence}
\alias{sinkhorn_divergence}
\title{Sinkhorn Divergence}
\usage{
sinkhorn_divergence(
  supplyList,
  demandList,
  eps,
  iterMax = 10000,
  tol = 1e-05,
  method = "euclidean",
  exp = 1,
  p = 2,
  wfr = FALSE,
  Cxy = NULL,
  Cxx = NULL,
  Cyy = NULL
)
}
\arguments{
\item{supplyList}{A list containing the information about the supply distribution, 
divergence function and parameter. The first element is the supply distribution itself,
the second the abbreviation of the divergence function ("KL" for Kullback Leibner, 
"TV" for total variation, "RG" for range constraint, "Power", "Berg" and "Hellinger") followed by the parameters 
needed for the divergence function: 

In case of the KL divergence (\eqn{F_1 = \lambda \cdot KL()}{F1 = lambda * KL()}),
TV divergence (\eqn{F_1 = \lambda \cdot TV()}{F1 = lambda * TV()}) and all Power
divergences (\eqn{F_1 = \lambda \cdot Power()}{F1 = lambda * Power()}) the
regularization parameter \eqn{\lambda}{lambda} has to be provided.

The "Power" divergence also needs the conjugate exponent as second parameter.

The divergence function associated with the range constraint needs two parameters, that define the upper and 
lower bound. 


If the cost matrix is not provided, the support of the supply distribution has to be provided as last element in the list. This can
be omitted if a cost matrix is passed as argument.}

\item{demandList}{A list containing the information about the demand measure in the same form as the supplyList.}

\item{eps}{A numeric value for the regularization parameter.}

\item{iterMax}{(optional) The maximum number of algorithm iterations. The default value is 10000.}

\item{tol}{(optional) A numeric value. If the change of the dual variables from one step to the next is smaller than this value. The algorithm
is terminated as it is already converged. The default value is 1e-5.}

\item{method}{(optional) Determines the method that is used to compute the cost matrix.
\itemize{
\item "euclidean"
\item "minkowski"
\item "maximum" 
}
The default value is "euclidean".}

\item{exp}{(optional) The exponent that is applied to the cost matrix. Can be used to compute quadratic cost. The default value is 1.}

\item{p}{(optional) Parameter for the minkwski cost function. Can be omitted if either "euclidean" or "maximum" is used. The default value is 2.}

\item{wfr}{(optional) Computes the cost matrix needed for the Wasserstein-Fisher-Rao distance \eqn{c(x,y) = -\log(\cos^2_+(d(x,y)))}{c(x,y) = -log(cos_+(d(x,y)²))}.
The default value is "false".}

\item{Cxy}{(optional) A cost matrix for transport between the supply and demand distributions.}

\item{Cxx}{(optional) A cost matrix for transport between the supply and supply distributions.}

\item{Cyy}{(optional) A cost matrix for transport between the demand and demand distributions.}
}
\value{
The Sinkhorn divergence.
}
\description{
Calculating the Sinkhorn divergence for regularized unbalanced optimal transport.
}
\details{
A function to calculating the Sinkhorn divergence for regularized unbalanced optimal transport.
For supply and demand measures \eqn{\alpha}{a} and \eqn{\beta}{b} the Sinkhorn divergence is defined as 
\eqn{S_{\varepsilon} = OT_\varepsilon(\alpha,\beta) - \frac{1}{2}OT_\varepsilon(\alpha,\alpha) -
\frac{1}{2}OT_\varepsilon(\beta,\beta) + \frac{\varepsilon}{2}(m(\alpha) - m(\beta))^2 }{S_eps(a,b) 
= OT_eps(a,b) - 0.5 OT_eps(a,a) - 0.5 OT_eps(b,b) + 0.5*eps (m(a) - m(b))²}

with transport cost \eqn{OT_\varepsilon(\alpha,\beta)}{OT_eps(a,b)}, regularization parameter \eqn{\varepsilon}{eps}
and supply and demand mass \eqn{m(\alpha)}{m(a)} and \eqn{m(\beta)}{m(b)}.

The transport costs are calculated using the Sinkhorn algorithm \code{\link[unbalancedTransport]{sinkhornAlgorithm}}.

\insertRef{Sejourne2019}{unbalancedTransport}
}
\examples{
I <- 1000
J <- 1000
X <- seq(0,1,length.out = I)
Y <- seq(0,1,length.out = J)
p <- supplyExample
q <- demandExample

supply <- list(p,X)
demand <- list(q,Y)

eps <- 1e-3 
supplyList <- list(p, "KL", 0.04, X)
demandList <- list(q, "KL", 0.04, Y)

sinkhorn_divergence(supplyList, demandList, eps, exp = 2)


}
