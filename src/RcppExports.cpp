// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// Monge_Rcpp
Rcpp::List Monge_Rcpp(Rcpp::NumericMatrix& costMatrix, Rcpp::NumericVector& supply, Rcpp::NumericVector& demand, double& constructionCost, double& destructionCost);
RcppExport SEXP _unbalancedTransport_Monge_Rcpp(SEXP costMatrixSEXP, SEXP supplySEXP, SEXP demandSEXP, SEXP constructionCostSEXP, SEXP destructionCostSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix& >::type costMatrix(costMatrixSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type supply(supplySEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type demand(demandSEXP);
    Rcpp::traits::input_parameter< double& >::type constructionCost(constructionCostSEXP);
    Rcpp::traits::input_parameter< double& >::type destructionCost(destructionCostSEXP);
    rcpp_result_gen = Rcpp::wrap(Monge_Rcpp(costMatrix, supply, demand, constructionCost, destructionCost));
    return rcpp_result_gen;
END_RCPP
}
// proxdiv
Eigen::VectorXd proxdiv(double lambda, Eigen::VectorXd p, Eigen::VectorXd s, Eigen::VectorXd u, double eps, int DivFun);
RcppExport SEXP _unbalancedTransport_proxdiv(SEXP lambdaSEXP, SEXP pSEXP, SEXP sSEXP, SEXP uSEXP, SEXP epsSEXP, SEXP DivFunSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type p(pSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type s(sSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type u(uSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< int >::type DivFun(DivFunSEXP);
    rcpp_result_gen = Rcpp::wrap(proxdiv(lambda, p, s, u, eps, DivFun));
    return rcpp_result_gen;
END_RCPP
}
// StabilizedScaling_Rcpp
Rcpp::List StabilizedScaling_Rcpp(Eigen::Map<Eigen::MatrixXd> costMatrix, Eigen::Map<Eigen::VectorXd> supply, Eigen::Map<Eigen::VectorXd> demand, Eigen::Map<Eigen::VectorXd> dx, Eigen::Map<Eigen::VectorXd> dy, double lambdaSupply, double lambdaDemand, int DivSupply, int DivDemand, int iterMax, Eigen::Map<Eigen::VectorXd> epsvec);
RcppExport SEXP _unbalancedTransport_StabilizedScaling_Rcpp(SEXP costMatrixSEXP, SEXP supplySEXP, SEXP demandSEXP, SEXP dxSEXP, SEXP dySEXP, SEXP lambdaSupplySEXP, SEXP lambdaDemandSEXP, SEXP DivSupplySEXP, SEXP DivDemandSEXP, SEXP iterMaxSEXP, SEXP epsvecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd> >::type costMatrix(costMatrixSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd> >::type supply(supplySEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd> >::type demand(demandSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd> >::type dx(dxSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd> >::type dy(dySEXP);
    Rcpp::traits::input_parameter< double >::type lambdaSupply(lambdaSupplySEXP);
    Rcpp::traits::input_parameter< double >::type lambdaDemand(lambdaDemandSEXP);
    Rcpp::traits::input_parameter< int >::type DivSupply(DivSupplySEXP);
    Rcpp::traits::input_parameter< int >::type DivDemand(DivDemandSEXP);
    Rcpp::traits::input_parameter< int >::type iterMax(iterMaxSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd> >::type epsvec(epsvecSEXP);
    rcpp_result_gen = Rcpp::wrap(StabilizedScaling_Rcpp(costMatrix, supply, demand, dx, dy, lambdaSupply, lambdaDemand, DivSupply, DivDemand, iterMax, epsvec));
    return rcpp_result_gen;
END_RCPP
}
// treegkr_Rcpp
Rcpp::List treegkr_Rcpp(Rcpp::List& tree, Rcpp::NumericVector& supply, Rcpp::NumericVector& demand, Rcpp::NumericVector& creation, Rcpp::NumericVector& destruction);
RcppExport SEXP _unbalancedTransport_treegkr_Rcpp(SEXP treeSEXP, SEXP supplySEXP, SEXP demandSEXP, SEXP creationSEXP, SEXP destructionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List& >::type tree(treeSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type supply(supplySEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type demand(demandSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type creation(creationSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type destruction(destructionSEXP);
    rcpp_result_gen = Rcpp::wrap(treegkr_Rcpp(tree, supply, demand, creation, destruction));
    return rcpp_result_gen;
END_RCPP
}
// Nw_Corner_Rule
double Nw_Corner_Rule(Rcpp::NumericMatrix costMatrix, Rcpp::NumericVector supply, Rcpp::NumericVector demand, Rcpp::NumericVector& iList, Rcpp::NumericVector& jList, Rcpp::NumericVector& weightList);
RcppExport SEXP _unbalancedTransport_Nw_Corner_Rule(SEXP costMatrixSEXP, SEXP supplySEXP, SEXP demandSEXP, SEXP iListSEXP, SEXP jListSEXP, SEXP weightListSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type costMatrix(costMatrixSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type supply(supplySEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type demand(demandSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type iList(iListSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type jList(jListSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type weightList(weightListSEXP);
    rcpp_result_gen = Rcpp::wrap(Nw_Corner_Rule(costMatrix, supply, demand, iList, jList, weightList));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_unbalancedTransport_Monge_Rcpp", (DL_FUNC) &_unbalancedTransport_Monge_Rcpp, 5},
    {"_unbalancedTransport_proxdiv", (DL_FUNC) &_unbalancedTransport_proxdiv, 6},
    {"_unbalancedTransport_StabilizedScaling_Rcpp", (DL_FUNC) &_unbalancedTransport_StabilizedScaling_Rcpp, 11},
    {"_unbalancedTransport_treegkr_Rcpp", (DL_FUNC) &_unbalancedTransport_treegkr_Rcpp, 5},
    {"_unbalancedTransport_Nw_Corner_Rule", (DL_FUNC) &_unbalancedTransport_Nw_Corner_Rule, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_unbalancedTransport(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
